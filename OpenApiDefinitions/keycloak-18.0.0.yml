components:
  schemas:
    AbstractAuthenticationExecutionRepresentation:
      properties:
        Authenticator:
          type: string
        AuthenticatorConfig:
          type: string
        AuthenticatorFlow:
          type: boolean
        AutheticatorFlow:
          type: boolean
        Priority:
          format: int32
          type: integer
        Requirement:
          type: string
      type: object
    AbstractPolicyRepresentation:
      properties:
        DecisionStrategy:
          description: DecisionStrategy
          enum:
          - AFFIRMATIVE
          - UNANIMOUS
          - CONSENSUS
          type: string
        Description:
          type: string
        Id:
          type: string
        Logic:
          description: Logic
          enum:
          - POSITIVE
          - NEGATIVE
          type: string
        Name:
          type: string
        Owner:
          type: string
        Policies:
          items:
            type: string
          type: array
        Resources:
          items:
            type: string
          type: array
        ResourcesData:
          items:
            $ref: '#/components/schemas/ResourceRepresentation'
          type: array
        Scopes:
          items:
            type: string
          type: array
        ScopesData:
          items:
            $ref: '#/components/schemas/ScopeRepresentation'
          type: array
        Type:
          type: string
      type: object
    Access:
      properties:
        Roles:
          items:
            type: string
          type: array
        VerifyCaller:
          type: boolean
      type: object
    AccessToken:
      properties:
        AllowedOrigins:
          items:
            type: string
          type: array
        Authorization:
          $ref: '#/components/schemas/Authorization'
        Category:
          description: TokenCategory
          enum:
          - INTERNAL
          - ACCESS
          - ID
          - ADMIN
          - USERINFO
          - LOGOUT
          - AUTHORIZATION_RESPONSE
          type: string
        CertConf:
          $ref: '#/components/schemas/CertConf'
        RealmAccess:
          $ref: '#/components/schemas/Access'
        Scope:
          type: string
        TrustedCertificates:
          items:
            type: string
          type: array
        suedAt:
          $ref: '#/components/schemas/AccessToken'
        suedFor:
          $ref: '#/components/schemas/AccessToken'
        suer:
          $ref: '#/components/schemas/AccessToken'
      type: object
    AccessTokenResponse:
      properties:
        Error:
          type: string
        ErrorDescription:
          type: string
        ErrorUri:
          type: string
        ExpiresIn:
          format: int64
          type: integer
        IdToken:
          type: string
        NotBeforePolicy:
          format: int32
          type: integer
        OtherClaims:
          additionalProperties:
            type: object
          type: object
        RefreshExpiresIn:
          format: int64
          type: integer
        RefreshToken:
          type: string
        Scope:
          type: string
        SessionState:
          type: string
        Token:
          type: string
        TokenType:
          type: string
      type: object
    AddressClaimSet:
      properties:
        Country:
          type: string
        FormattedAddress:
          type: string
        Locality:
          type: string
        PostalCode:
          type: string
        Region:
          type: string
        StreetAddress:
          type: string
      type: object
    AdminEventRepresentation:
      properties:
        AuthDetails:
          $ref: '#/components/schemas/AuthDetailsRepresentation'
        Error:
          type: string
        OperationType:
          type: string
        RealmId:
          type: string
        Representation:
          type: string
        ResourcePath:
          type: string
        ResourceType:
          type: string
        Time:
          format: int64
          type: integer
      type: object
    AggregatePolicyRepresentation:
      properties:
        Type:
          type: string
      type: object
    ApplicationRepresentation:
      properties:
        Claims:
          $ref: '#/components/schemas/ClaimRepresentation'
        Name:
          type: string
      type: object
    AuthDetailsRepresentation:
      properties:
        ClientId:
          type: string
        IpAddress:
          type: string
        RealmId:
          type: string
        UserId:
          type: string
      type: object
    AuthenticationExecutionExportRepresentation:
      properties:
        FlowAlias:
          type: string
        UserSetupAllowed:
          type: boolean
      type: object
    AuthenticationExecutionInfoRepresentation:
      properties:
        Alias:
          type: string
        AuthenticationConfig:
          type: string
        AuthenticationFlow:
          type: boolean
        Configurable:
          type: boolean
        Description:
          type: string
        DisplayName:
          type: string
        FlowId:
          type: string
        Id:
          type: string
        Index:
          format: int32
          type: integer
        Level:
          format: int32
          type: integer
        ProviderId:
          type: string
        Requirement:
          type: string
        RequirementChoices:
          items:
            type: string
          type: array
      type: object
    AuthenticationExecutionRepresentation:
      properties:
        FlowId:
          type: string
        Id:
          type: string
        ParentFlow:
          type: string
      type: object
    AuthenticationFlowRepresentation:
      properties:
        Alias:
          type: string
        AuthenticationExecutions:
          items:
            $ref: '#/components/schemas/AuthenticationExecutionExportRepresentation'
          type: array
        BuiltIn:
          type: boolean
        Description:
          type: string
        Id:
          type: string
        ProviderId:
          type: string
        TopLevel:
          type: boolean
      type: object
    AuthenticatorConfigInfoRepresentation:
      properties:
        HelpText:
          type: string
        Name:
          type: string
        Properties:
          items:
            $ref: '#/components/schemas/ConfigPropertyRepresentation'
          type: array
        ProviderId:
          type: string
      type: object
    AuthenticatorConfigRepresentation:
      properties:
        Alias:
          type: string
        Config:
          additionalProperties:
            type: string
          type: object
        Id:
          type: string
      type: object
    Authorization:
      properties:
        Permissions:
          items:
            $ref: '#/components/schemas/Permission'
          type: array
      type: object
    AuthorizationDetailsJSONRepresentation:
      properties:
        Actions:
          items:
            type: string
          type: array
        CustomData:
          additionalProperties:
            type: object
          type: object
        Datatypes:
          items:
            type: string
          type: array
        DynamicScopeParamFromCustomData:
          type: string
        Identifier:
          type: string
        Locations:
          items:
            type: string
          type: array
        Privileges:
          items:
            type: string
          type: array
        ScopeNameFromCustomData:
          type: string
        Type:
          type: string
      type: object
    AuthorizationResponseToken:
      properties:
        Category:
          description: TokenCategory
          enum:
          - INTERNAL
          - ACCESS
          - ID
          - ADMIN
          - USERINFO
          - LOGOUT
          - AUTHORIZATION_RESPONSE
          type: string
      type: object
    CertConf:
      properties:
        CertThumbprint:
          type: string
      type: object
    CertificateRepresentation:
      properties:
        Certificate:
          type: string
        Kid:
          type: string
        PrivateKey:
          type: string
        PublicKey:
          type: string
      type: object
    ClaimRepresentation:
      properties:
        Address:
          type: boolean
        Email:
          type: boolean
        Gender:
          type: boolean
        Locale:
          type: boolean
        Name:
          type: boolean
        Phone:
          type: boolean
        Picture:
          type: boolean
        Profile:
          type: boolean
        Username:
          type: boolean
        Website:
          type: boolean
      type: object
    ClaimsRepresentation:
      properties:
        ClaimValue:
          description: ClaimValue<CLAIM_TYPE>
          type: object
        IdTokenClaims:
          additionalProperties:
            description: ClaimValue
            type: object
          type: object
        Present:
          type: boolean
        PresentAsNullClaim:
          type: boolean
        UserinfoClaims:
          additionalProperties:
            description: ClaimValue
            type: object
          type: object
      type: object
    ClientInitialAccessCreatePresentation:
      properties:
        Count:
          format: int32
          type: integer
        Expiration:
          format: int32
          type: integer
      type: object
    ClientInitialAccessPresentation:
      properties:
        Count:
          format: int32
          type: integer
        Expiration:
          format: int32
          type: integer
        Id:
          type: string
        RemainingCount:
          format: int32
          type: integer
        Timestamp:
          format: int32
          type: integer
        Token:
          type: string
      type: object
    ClientMappingsRepresentation:
      properties:
        Client:
          type: string
        Id:
          type: string
        Mappings:
          items:
            $ref: '#/components/schemas/RoleRepresentation'
          type: array
      type: object
    ClientPoliciesRepresentation:
      properties:
        Policies:
          items:
            description: ClientPolicyRepresentation
            type: object
          type: array
      type: object
    ClientPolicyConditionConfigurationRepresentation:
      properties:
        ConfigAsMap:
          additionalProperties:
            type: object
          type: object
        NegativeLogic:
          type: boolean
      type: object
    ClientPolicyConditionRepresentation:
      properties:
        ConditionProviderId:
          type: string
        Configuration:
          type: object
      type: object
    ClientPolicyExecutorConfigurationRepresentation:
      properties:
        ConfigAsMap:
          additionalProperties:
            type: object
          type: object
      type: object
    ClientPolicyExecutorRepresentation:
      properties:
        Configuration:
          type: object
        ExecutorProviderId:
          type: string
      type: object
    ClientProfileRepresentation:
      properties:
        Description:
          type: string
        Executors:
          items:
            $ref: '#/components/schemas/ClientPolicyExecutorRepresentation'
          type: array
        Name:
          type: string
      type: object
    ClientProfilesRepresentation:
      properties:
        GlobalProfiles:
          items:
            $ref: '#/components/schemas/ClientProfileRepresentation'
          type: array
        Profiles:
          items:
            $ref: '#/components/schemas/ClientProfileRepresentation'
          type: array
      type: object
    ClientRepresentation:
      properties:
        Access:
          additionalProperties:
            type: boolean
          type: object
        AdminUrl:
          type: string
        AlwaysDisplayInConsole:
          type: boolean
        Attributes:
          additionalProperties:
            type: string
          type: object
        AuthenticationFlowBindingOverrides:
          additionalProperties:
            type: string
          type: object
        AuthorizationServicesEnabled:
          type: boolean
        AuthorizationSettings:
          $ref: '#/components/schemas/ResourceServerRepresentation'
        BaseUrl:
          type: string
        BearerOnly:
          type: boolean
        ClientAuthenticatorType:
          type: string
        ClientId:
          type: string
        ClientTemplate:
          type: string
        ConsentRequired:
          type: boolean
        DefaultClientScopes:
          items:
            type: string
          type: array
        DefaultRoles:
          items:
            type: string
          type: array
        Description:
          type: string
        DirectAccessGrantsEnabled:
          type: boolean
        DirectGrantsOnly:
          type: boolean
        Enabled:
          type: boolean
        FrontchannelLogout:
          type: boolean
        FullScopeAllowed:
          type: boolean
        Id:
          type: string
        ImplicitFlowEnabled:
          type: boolean
        Name:
          type: string
        NodeReRegistrationTimeout:
          format: int32
          type: integer
        NotBefore:
          format: int32
          type: integer
        OptionalClientScopes:
          items:
            type: string
          type: array
        Origin:
          type: string
        Protocol:
          type: string
        ProtocolMappers:
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
          type: array
        PublicClient:
          type: boolean
        RedirectUris:
          items:
            type: string
          type: array
        RegisteredNodes:
          additionalProperties:
            format: int32
            type: integer
          type: object
        RegistrationAccessToken:
          type: string
        RootUrl:
          type: string
        Secret:
          type: string
        ServiceAccountsEnabled:
          type: boolean
        StandardFlowEnabled:
          type: boolean
        SurrogateAuthRequired:
          type: boolean
        UseTemplateConfig:
          type: boolean
        UseTemplateMappers:
          type: boolean
        UseTemplateScope:
          type: boolean
        WebOrigins:
          items:
            type: string
          type: array
      type: object
    ClientScopeDefinition:
      properties:
        Id:
          type: string
        Required:
          type: boolean
      type: object
    ClientScopePolicyRepresentation:
      properties:
        ClientScopes:
          items:
            $ref: '#/components/schemas/ClientScopeDefinition'
          type: array
        Type:
          type: string
      type: object
    ClientScopeRepresentation:
      properties:
        Attributes:
          additionalProperties:
            type: string
          type: object
        Description:
          type: string
        Id:
          type: string
        Name:
          type: string
        Protocol:
          type: string
        ProtocolMappers:
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
          type: array
      type: object
    ClientTemplateRepresentation:
      properties:
        Attributes:
          additionalProperties:
            type: string
          type: object
        BearerOnly:
          type: boolean
        ConsentRequired:
          type: boolean
        Description:
          type: string
        DirectAccessGrantsEnabled:
          type: boolean
        FrontchannelLogout:
          type: boolean
        FullScopeAllowed:
          type: boolean
        Id:
          type: string
        ImplicitFlowEnabled:
          type: boolean
        Name:
          type: string
        Protocol:
          type: string
        ProtocolMappers:
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
          type: array
        PublicClient:
          type: boolean
        ServiceAccountsEnabled:
          type: boolean
        StandardFlowEnabled:
          type: boolean
      type: object
    ComponentExportRepresentation:
      properties:
        Config:
          additionalProperties:
            type: string
          type: object
        Id:
          type: string
        Name:
          type: string
        ProviderId:
          type: string
        SubComponents:
          additionalProperties:
            $ref: '#/components/schemas/ComponentExportRepresentation'
          type: object
        SubType:
          type: string
      type: object
    ComponentRepresentation:
      properties:
        Config:
          additionalProperties:
            type: string
          type: object
        Id:
          type: string
        Name:
          type: string
        ParentId:
          type: string
        ProviderId:
          type: string
        ProviderType:
          type: string
        SubType:
          type: string
      type: object
    ComponentTypeRepresentation:
      properties:
        HelpText:
          type: string
        Id:
          type: string
        Metadata:
          additionalProperties:
            type: object
          type: object
        Properties:
          items:
            $ref: '#/components/schemas/ConfigPropertyRepresentation'
          type: array
      type: object
    Composites:
      properties:
        Application:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        Client:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        Realm:
          items:
            type: string
          type: array
      type: object
    ConfigPropertyRepresentation:
      properties:
        DefaultValue:
          type: object
        HelpText:
          type: string
        Label:
          type: string
        Name:
          type: string
        Options:
          items:
            type: string
          type: array
        ReadOnly:
          type: boolean
        Secret:
          type: boolean
        Type:
          type: string
      type: object
    CredentialRepresentation:
      properties:
        Algorithm:
          type: string
        Config:
          additionalProperties:
            type: string
          type: object
        Counter:
          format: int32
          type: integer
        CreatedDate:
          format: int64
          type: integer
        CredentialData:
          type: string
        Device:
          type: string
        Digits:
          format: int32
          type: integer
        HashIterations:
          format: int32
          type: integer
        HashedSaltedValue:
          type: string
        Id:
          type: string
        Period:
          format: int32
          type: integer
        Priority:
          format: int32
          type: integer
        Salt:
          type: string
        SecretData:
          type: string
        Temporary:
          type: boolean
        Type:
          type: string
        UserLabel:
          type: string
        Value:
          type: string
      type: object
    EventRepresentation:
      properties:
        ClientId:
          type: string
        Details:
          additionalProperties:
            type: string
          type: object
        Error:
          type: string
        IpAddress:
          type: string
        RealmId:
          type: string
        SessionId:
          type: string
        Time:
          format: int64
          type: integer
        Type:
          type: string
        UserId:
          type: string
      type: object
    FederatedIdentityRepresentation:
      properties:
        IdentityProvider:
          type: string
        UserId:
          type: string
        UserName:
          type: string
      type: object
    GroupDefinition:
      properties:
        ExtendChildren:
          type: boolean
        Id:
          type: string
        Path:
          type: string
      type: object
    GroupPolicyRepresentation:
      properties:
        Groups:
          items:
            $ref: '#/components/schemas/GroupDefinition'
          type: array
        GroupsClaim:
          type: string
        Type:
          type: string
      type: object
    GroupRepresentation:
      properties:
        Access:
          additionalProperties:
            type: boolean
          type: object
        Attributes:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        ClientRoles:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        Id:
          type: string
        Name:
          type: string
        Path:
          type: string
        RealmRoles:
          items:
            type: string
          type: array
        SubGroups:
          items:
            $ref: '#/components/schemas/GroupRepresentation'
          type: array
      type: object
    IDToken:
      properties:
        AccessTokenHash:
          type: string
        Acr:
          type: string
        Address:
          $ref: '#/components/schemas/AddressClaimSet'
        Auth_time:
          format: int64
          type: integer
        Birthdate:
          type: string
        Category:
          description: TokenCategory
          enum:
          - INTERNAL
          - ACCESS
          - ID
          - ADMIN
          - USERINFO
          - LOGOUT
          - AUTHORIZATION_RESPONSE
          type: string
        ClaimsLocales:
          type: string
        CodeHash:
          type: string
        Email:
          type: string
        EmailVerified:
          type: boolean
        FamilyName:
          type: string
        Gender:
          type: string
        GivenName:
          type: string
        Locale:
          type: string
        MiddleName:
          type: string
        Name:
          type: string
        NickName:
          type: string
        Nonce:
          type: string
        PhoneNumber:
          type: string
        PhoneNumberVerified:
          type: boolean
        Picture:
          type: string
        PreferredUsername:
          type: string
        Profile:
          type: string
        SessionId:
          type: string
        SessionState:
          type: string
        StateHash:
          type: string
        UpdatedAt:
          format: int64
          type: integer
        Website:
          type: string
        Zoneinfo:
          type: string
      type: object
    IdentityProviderMapperRepresentation:
      properties:
        Config:
          additionalProperties:
            type: string
          type: object
        Id:
          type: string
        IdentityProviderAlias:
          type: string
        IdentityProviderMapper:
          type: string
        Name:
          type: string
      type: object
    IdentityProviderMapperTypeRepresentation:
      properties:
        Category:
          type: string
        HelpText:
          type: string
        Id:
          type: string
        Name:
          type: string
        Properties:
          items:
            $ref: '#/components/schemas/ConfigPropertyRepresentation'
          type: array
      type: object
    IdentityProviderRepresentation:
      properties:
        AddReadTokenRoleOnCreate:
          type: boolean
        Alias:
          type: string
        AuthenticateByDefault:
          type: boolean
        Config:
          additionalProperties:
            type: string
          type: object
        DisplayName:
          type: string
        Enabled:
          type: boolean
        FirstBrokerLoginFlowAlias:
          type: string
        InternalId:
          type: string
        LinkOnly:
          type: boolean
        PostBrokerLoginFlowAlias:
          type: string
        ProviderId:
          type: string
        StoreToken:
          type: boolean
        TrustEmail:
          type: boolean
        UpdateProfileFirstLoginMode:
          type: string
      type: object
    JSPolicyRepresentation:
      properties:
        Code:
          type: string
        Type:
          type: string
      type: object
    JsonWebToken:
      properties:
        Category:
          description: TokenCategory
          enum:
          - INTERNAL
          - ACCESS
          - ID
          - ADMIN
          - USERINFO
          - LOGOUT
          - AUTHORIZATION_RESPONSE
          type: string
        Exp:
          format: int64
          type: integer
        Iat:
          format: int64
          type: integer
        Id:
          type: string
        IssuedFor:
          type: string
        Issuer:
          type: string
        Nbf:
          format: int64
          type: integer
        OtherClaims:
          additionalProperties:
            type: object
          type: object
        Subject:
          type: string
        Type:
          type: string
        suedFor:
          $ref: '#/components/schemas/JsonWebToken'
        suer:
          $ref: '#/components/schemas/JsonWebToken'
      type: object
    KeyMetadataRepresentation:
      properties:
        Algorithm:
          type: string
        Certificate:
          type: string
        Kid:
          type: string
        ProviderId:
          type: string
        ProviderPriority:
          format: int64
          type: integer
        PublicKey:
          type: string
        Status:
          type: string
        Type:
          type: string
        Use:
          description: KeyUse
          type: object
      type: object
    KeyStoreConfig:
      properties:
        Format:
          type: string
        KeyAlias:
          type: string
        KeyPassword:
          type: string
        RealmAlias:
          type: string
        RealmCertificate:
          type: boolean
        StorePassword:
          type: string
      type: object
    KeysMetadataRepresentation:
      properties:
        Active:
          additionalProperties:
            type: string
          type: object
        Keys:
          items:
            $ref: '#/components/schemas/KeyMetadataRepresentation'
          type: array
      type: object
    LDAPCapabilityRepresentation:
      properties:
        Oid:
          type: string
        Type:
          description: CapabilityType
          type: object
      type: object
    LogoutToken:
      properties:
        Category:
          description: TokenCategory
          enum:
          - INTERNAL
          - ACCESS
          - ID
          - ADMIN
          - USERINFO
          - LOGOUT
          - AUTHORIZATION_RESPONSE
          type: string
        Events:
          additionalProperties:
            type: object
          type: object
        Sid:
          type: string
      type: object
    ManagementPermissionReference:
      properties:
        Enabled:
          type: boolean
        Resource:
          type: string
        ScopePermissions:
          additionalProperties:
            type: string
          type: object
      type: object
    ManagementPermissionRepresentation:
      properties:
        Enabled:
          type: boolean
      type: object
    MappingsRepresentation:
      properties:
        ClientMappings:
          additionalProperties:
            $ref: '#/components/schemas/ClientMappingsRepresentation'
          type: object
        RealmMappings:
          items:
            $ref: '#/components/schemas/RoleRepresentation'
          type: array
      type: object
    OAuth2DeviceAuthorizationResponse:
      properties:
        DeviceCode:
          type: string
        ExpiresIn:
          format: int64
          type: integer
        Interval:
          format: int64
          type: integer
        UserCode:
          type: string
        VerificationUri:
          type: string
        VerificationUriComplete:
          type: string
      type: object
    OAuth2ErrorRepresentation:
      properties:
        Error:
          type: string
        ErrorDescription:
          type: string
      type: object
    OAuthClientRepresentation:
      type: object
    PartialImportRepresentation:
      properties:
        Clients:
          items:
            $ref: '#/components/schemas/ClientRepresentation'
          type: array
        Groups:
          items:
            $ref: '#/components/schemas/GroupRepresentation'
          type: array
        IdentityProviders:
          items:
            $ref: '#/components/schemas/IdentityProviderRepresentation'
          type: array
        IfResourceExists:
          type: string
        Policy:
          description: Policy
          type: object
        Roles:
          $ref: '#/components/schemas/RolesRepresentation'
        Users:
          items:
            $ref: '#/components/schemas/UserRepresentation'
          type: array
      type: object
    PasswordPolicyTypeRepresentation:
      properties:
        ConfigType:
          type: string
        DefaultValue:
          type: string
        DisplayName:
          type: string
        Id:
          type: string
        MultipleSupported:
          type: boolean
      type: object
    Permission:
      properties:
        Claims:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        ResourceId:
          type: string
        ResourceName:
          type: string
        Scopes:
          items:
            type: string
          type: array
      type: object
    PermissionTicketRepresentation:
      properties:
        Granted:
          type: boolean
        Id:
          type: string
        Owner:
          type: string
        OwnerName:
          type: string
        Requester:
          type: string
        RequesterName:
          type: string
        Resource:
          type: string
        ResourceName:
          type: string
        Scope:
          type: string
        ScopeName:
          type: string
      type: object
    PolicyProviderRepresentation:
      properties:
        Group:
          type: string
        Name:
          type: string
        Type:
          type: string
      type: object
    PolicyRepresentation:
      properties:
        Config:
          additionalProperties:
            type: string
          type: object
      type: object
    ProtocolMapperEvaluationRepresentation:
      properties:
        ContainerId:
          type: string
        ContainerName:
          type: string
        ContainerType:
          type: string
        MapperId:
          type: string
        MapperName:
          type: string
        ProtocolMapper:
          type: string
      type: object
    ProtocolMapperRepresentation:
      properties:
        Config:
          additionalProperties:
            type: string
          type: object
        ConsentRequired:
          type: boolean
        ConsentText:
          type: string
        Id:
          type: string
        Name:
          type: string
        Protocol:
          type: string
        ProtocolMapper:
          type: string
      type: object
    ProtocolMapperTypeRepresentation:
      properties:
        Category:
          type: string
        HelpText:
          type: string
        Id:
          type: string
        Name:
          type: string
        Priority:
          format: int32
          type: integer
        Properties:
          items:
            $ref: '#/components/schemas/ConfigPropertyRepresentation'
          type: array
      type: object
    PublishedRealmRepresentation:
      properties:
        AccountServiceUrl:
          type: string
        NotBefore:
          format: int32
          type: integer
        PublicKeyPem:
          type: string
        TokenServiceUrl:
          type: string
      type: object
    RealmEventsConfigRepresentation:
      properties:
        AdminEventsDetailsEnabled:
          type: boolean
        AdminEventsEnabled:
          type: boolean
        EnabledEventTypes:
          items:
            type: string
          type: array
        EventsEnabled:
          type: boolean
        EventsExpiration:
          format: int64
          type: integer
        EventsListeners:
          items:
            type: string
          type: array
      type: object
    RealmRepresentation:
      properties:
        AccessCodeLifespan:
          format: int32
          type: integer
        AccessCodeLifespanLogin:
          format: int32
          type: integer
        AccessCodeLifespanUserAction:
          format: int32
          type: integer
        AccessTokenLifespan:
          format: int32
          type: integer
        AccessTokenLifespanForImplicitFlow:
          format: int32
          type: integer
        AccountTheme:
          type: string
        ActionTokenGeneratedByAdminLifespan:
          format: int32
          type: integer
        ActionTokenGeneratedByUserLifespan:
          format: int32
          type: integer
        AdminEventsDetailsEnabled:
          type: boolean
        AdminEventsEnabled:
          type: boolean
        AdminTheme:
          type: string
        ApplicationScopeMappings:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ScopeMappingRepresentation'
            type: array
          type: object
        Applications:
          items:
            $ref: '#/components/schemas/ApplicationRepresentation'
          type: array
        Attributes:
          additionalProperties:
            type: string
          type: object
        AuthenticationFlows:
          items:
            $ref: '#/components/schemas/AuthenticationFlowRepresentation'
          type: array
        AuthenticatorConfig:
          items:
            $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
          type: array
        BrowserFlow:
          type: string
        BrowserSecurityHeaders:
          additionalProperties:
            type: string
          type: object
        BruteForceProtected:
          type: boolean
        Certificate:
          type: string
        ClientAuthenticationFlow:
          type: string
        ClientOfflineSessionIdleTimeout:
          format: int32
          type: integer
        ClientOfflineSessionMaxLifespan:
          format: int32
          type: integer
        ClientScopeMappings:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ScopeMappingRepresentation'
            type: array
          type: object
        ClientScopes:
          items:
            $ref: '#/components/schemas/ClientScopeRepresentation'
          type: array
        ClientSessionIdleTimeout:
          format: int32
          type: integer
        ClientSessionMaxLifespan:
          format: int32
          type: integer
        ClientTemplates:
          items:
            $ref: '#/components/schemas/ClientTemplateRepresentation'
          type: array
        Clients:
          items:
            $ref: '#/components/schemas/ClientRepresentation'
          type: array
        CodeSecret:
          type: string
        Components:
          additionalProperties:
            $ref: '#/components/schemas/ComponentExportRepresentation'
          type: object
        DefaultDefaultClientScopes:
          items:
            type: string
          type: array
        DefaultGroups:
          items:
            type: string
          type: array
        DefaultLocale:
          type: string
        DefaultOptionalClientScopes:
          items:
            type: string
          type: array
        DefaultRole:
          $ref: '#/components/schemas/RoleRepresentation'
        DefaultRoles:
          items:
            type: string
          type: array
        DefaultSignatureAlgorithm:
          type: string
        DirectGrantFlow:
          type: string
        DisplayName:
          type: string
        DisplayNameHtml:
          type: string
        DockerAuthenticationFlow:
          type: string
        DuplicateEmailsAllowed:
          type: boolean
        EditUsernameAllowed:
          type: boolean
        EmailTheme:
          type: string
        Enabled:
          type: boolean
        EnabledEventTypes:
          items:
            type: string
          type: array
        EventsEnabled:
          type: boolean
        EventsExpiration:
          format: int64
          type: integer
        EventsListeners:
          items:
            type: string
          type: array
        FailureFactor:
          format: int32
          type: integer
        FederatedUsers:
          items:
            $ref: '#/components/schemas/UserRepresentation'
          type: array
        Groups:
          items:
            $ref: '#/components/schemas/GroupRepresentation'
          type: array
        Id:
          type: string
        IdentityProviderMappers:
          items:
            $ref: '#/components/schemas/IdentityProviderMapperRepresentation'
          type: array
        IdentityProviders:
          items:
            $ref: '#/components/schemas/IdentityProviderRepresentation'
          type: array
        InternationalizationEnabled:
          type: boolean
        KeycloakVersion:
          type: string
        LoginTheme:
          type: string
        LoginWithEmailAllowed:
          type: boolean
        MaxDeltaTimeSeconds:
          format: int32
          type: integer
        MaxFailureWaitSeconds:
          format: int32
          type: integer
        MinimumQuickLoginWaitSeconds:
          format: int32
          type: integer
        NotBefore:
          format: int32
          type: integer
        OAuth2DeviceCodeLifespan:
          format: int32
          type: integer
        OAuth2DevicePollingInterval:
          format: int32
          type: integer
        OauthClients:
          items:
            $ref: '#/components/schemas/OAuthClientRepresentation'
          type: array
        OfflineSessionIdleTimeout:
          format: int32
          type: integer
        OfflineSessionMaxLifespan:
          format: int32
          type: integer
        OfflineSessionMaxLifespanEnabled:
          type: boolean
        OtpPolicyAlgorithm:
          type: string
        OtpPolicyDigits:
          format: int32
          type: integer
        OtpPolicyInitialCounter:
          format: int32
          type: integer
        OtpPolicyLookAheadWindow:
          format: int32
          type: integer
        OtpPolicyPeriod:
          format: int32
          type: integer
        OtpPolicyType:
          type: string
        OtpSupportedApplications:
          items:
            type: string
          type: array
        PasswordCredentialGrantAllowed:
          type: boolean
        PasswordPolicy:
          type: string
        PermanentLockout:
          type: boolean
        PrivateKey:
          type: string
        ProtocolMappers:
          items:
            $ref: '#/components/schemas/ProtocolMapperRepresentation'
          type: array
        PublicKey:
          type: string
        QuickLoginCheckMilliSeconds:
          format: int64
          type: integer
        Realm:
          type: string
        RefreshTokenMaxReuse:
          format: int32
          type: integer
        RegistrationAllowed:
          type: boolean
        RegistrationEmailAsUsername:
          type: boolean
        RegistrationFlow:
          type: string
        RememberMe:
          type: boolean
        RequiredActions:
          items:
            $ref: '#/components/schemas/RequiredActionProviderRepresentation'
          type: array
        RequiredCredentials:
          items:
            type: string
          type: array
        ResetCredentialsFlow:
          type: string
        ResetPasswordAllowed:
          type: boolean
        RevokeRefreshToken:
          type: boolean
        Roles:
          $ref: '#/components/schemas/RolesRepresentation'
        ScopeMappings:
          items:
            $ref: '#/components/schemas/ScopeMappingRepresentation'
          type: array
        SmtpServer:
          additionalProperties:
            type: string
          type: object
        Social:
          type: boolean
        SocialProviders:
          additionalProperties:
            type: string
          type: object
        SslRequired:
          type: string
        SsoSessionIdleTimeout:
          format: int32
          type: integer
        SsoSessionIdleTimeoutRememberMe:
          format: int32
          type: integer
        SsoSessionMaxLifespan:
          format: int32
          type: integer
        SsoSessionMaxLifespanRememberMe:
          format: int32
          type: integer
        SupportedLocales:
          items:
            type: string
          type: array
        UpdateProfileOnInitialSocialLogin:
          type: boolean
        UserFederationMappers:
          items:
            $ref: '#/components/schemas/UserFederationMapperRepresentation'
          type: array
        UserFederationProviders:
          items:
            $ref: '#/components/schemas/UserFederationProviderRepresentation'
          type: array
        UserManagedAccessAllowed:
          type: boolean
        Users:
          items:
            $ref: '#/components/schemas/UserRepresentation'
          type: array
        VerifyEmail:
          type: boolean
        WaitIncrementSeconds:
          format: int32
          type: integer
        WebAuthnPolicyAcceptableAaguids:
          items:
            type: string
          type: array
        WebAuthnPolicyAttestationConveyancePreference:
          type: string
        WebAuthnPolicyAuthenticatorAttachment:
          type: string
        WebAuthnPolicyAvoidSameAuthenticatorRegister:
          type: boolean
        WebAuthnPolicyCreateTimeout:
          format: int32
          type: integer
        WebAuthnPolicyPasswordlessAcceptableAaguids:
          items:
            type: string
          type: array
        WebAuthnPolicyPasswordlessAttestationConveyancePreference:
          type: string
        WebAuthnPolicyPasswordlessAuthenticatorAttachment:
          type: string
        WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister:
          type: boolean
        WebAuthnPolicyPasswordlessCreateTimeout:
          format: int32
          type: integer
        WebAuthnPolicyPasswordlessRequireResidentKey:
          type: string
        WebAuthnPolicyPasswordlessRpEntityName:
          type: string
        WebAuthnPolicyPasswordlessRpId:
          type: string
        WebAuthnPolicyPasswordlessSignatureAlgorithms:
          items:
            type: string
          type: array
        WebAuthnPolicyPasswordlessUserVerificationRequirement:
          type: string
        WebAuthnPolicyRequireResidentKey:
          type: string
        WebAuthnPolicyRpEntityName:
          type: string
        WebAuthnPolicyRpId:
          type: string
        WebAuthnPolicySignatureAlgorithms:
          items:
            type: string
          type: array
        WebAuthnPolicyUserVerificationRequirement:
          type: string
      type: object
    RefreshToken:
      properties:
        Category:
          description: TokenCategory
          enum:
          - INTERNAL
          - ACCESS
          - ID
          - ADMIN
          - USERINFO
          - LOGOUT
          - AUTHORIZATION_RESPONSE
          type: string
      type: object
    RegexPolicyRepresentation:
      properties:
        Pattern:
          type: string
        TargetClaim:
          type: string
        Type:
          type: string
      type: object
    RequiredActionProviderRepresentation:
      properties:
        Alias:
          type: string
        Config:
          additionalProperties:
            type: string
          type: object
        DefaultAction:
          type: boolean
        Enabled:
          type: boolean
        Name:
          type: string
        Priority:
          format: int32
          type: integer
        ProviderId:
          type: string
      type: object
    RequiredActionProviderSimpleRepresentation:
      properties:
        Id:
          type: string
        Name:
          type: string
        ProviderId:
          type: string
      type: object
    ResourceOwnerRepresentation:
      properties:
        Id:
          type: string
        Name:
          type: string
      type: object
    ResourcePermissionRepresentation:
      properties:
        ResourceType:
          type: string
        Type:
          type: string
      type: object
    ResourceRepresentation:
      properties:
        Attributes:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        DisplayName:
          type: string
        IconUri:
          type: string
        Id:
          type: string
        Name:
          type: string
        Owner:
          $ref: '#/components/schemas/ResourceOwnerRepresentation'
        OwnerManagedAccess:
          type: boolean
        Scopes:
          items:
            $ref: '#/components/schemas/ScopeRepresentation'
          type: array
        Type:
          type: string
        Uris:
          items:
            type: string
          type: array
      type: object
    ResourceServerRepresentation:
      properties:
        AllowRemoteResourceManagement:
          type: boolean
        ClientId:
          type: string
        DecisionStrategy:
          description: DecisionStrategy
          enum:
          - AFFIRMATIVE
          - UNANIMOUS
          - CONSENSUS
          type: string
        Id:
          type: string
        Name:
          type: string
        Policies:
          items:
            $ref: '#/components/schemas/PolicyRepresentation'
          type: array
        PolicyEnforcementMode:
          description: PolicyEnforcementMode
          enum:
          - ENFORCING
          - PERMISSIVE
          - DISABLED
          type: string
        Resources:
          items:
            $ref: '#/components/schemas/ResourceRepresentation'
          type: array
        Scopes:
          items:
            $ref: '#/components/schemas/ScopeRepresentation'
          type: array
      type: object
    RoleDefinition:
      properties:
        Id:
          type: string
        Required:
          type: boolean
      type: object
    RolePolicyRepresentation:
      properties:
        Roles:
          items:
            $ref: '#/components/schemas/RoleDefinition'
          type: array
        Type:
          type: string
      type: object
    RoleRepresentation:
      properties:
        Attributes:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        ClientRole:
          type: boolean
        Composite:
          type: boolean
        Composites:
          $ref: '#/components/schemas/Composites'
        ContainerId:
          type: string
        Description:
          type: string
        Id:
          type: string
        Name:
          type: string
        ScopeParamRequired:
          type: boolean
      type: object
    RolesRepresentation:
      properties:
        Application:
          additionalProperties:
            items:
              $ref: '#/components/schemas/RoleRepresentation'
            type: array
          type: object
        Client:
          additionalProperties:
            items:
              $ref: '#/components/schemas/RoleRepresentation'
            type: array
          type: object
        Realm:
          items:
            $ref: '#/components/schemas/RoleRepresentation'
          type: array
      type: object
    ScopeMappingRepresentation:
      properties:
        Client:
          type: string
        ClientScope:
          type: string
        ClientTemplate:
          type: string
        Roles:
          items:
            type: string
          type: array
        Self:
          type: string
      type: object
    ScopePermissionRepresentation:
      properties:
        ResourceType:
          type: string
        Type:
          type: string
      type: object
    ScopeRepresentation:
      properties:
        DisplayName:
          type: string
        IconUri:
          type: string
        Id:
          type: string
        Name:
          type: string
        Policies:
          items:
            $ref: '#/components/schemas/PolicyRepresentation'
          type: array
        Resources:
          items:
            $ref: '#/components/schemas/ResourceRepresentation'
          type: array
      type: object
    SocialLinkRepresentation:
      properties:
        SocialProvider:
          type: string
        SocialUserId:
          type: string
        SocialUsername:
          type: string
      type: object
    SynchronizationResult:
      properties:
        Added:
          format: int32
          type: integer
        Failed:
          format: int32
          type: integer
        Ignored:
          type: boolean
        Removed:
          format: int32
          type: integer
        Status:
          type: string
        Updated:
          format: int32
          type: integer
      type: object
    SynchronizationResultRepresentation:
      properties:
        Added:
          format: int32
          type: integer
        Failed:
          format: int32
          type: integer
        Ignored:
          type: boolean
        Removed:
          format: int32
          type: integer
        Status:
          type: string
        Updated:
          format: int32
          type: integer
      type: object
    TestLdapConnectionRepresentation:
      properties:
        Action:
          type: string
        AuthType:
          type: string
        BindCredential:
          type: string
        BindDn:
          type: string
        ComponentId:
          type: string
        ConnectionTimeout:
          type: string
        ConnectionUrl:
          type: string
        StartTls:
          type: string
        UseTruststoreSpi:
          type: string
      type: object
    TimePolicyRepresentation:
      properties:
        DayMonth:
          type: string
        DayMonthEnd:
          type: string
        Hour:
          type: string
        HourEnd:
          type: string
        Minute:
          type: string
        MinuteEnd:
          type: string
        Month:
          type: string
        MonthEnd:
          type: string
        NotBefore:
          type: string
        NotOnOrAfter:
          type: string
        Type:
          type: string
        Year:
          type: string
        YearEnd:
          type: string
      type: object
    UmaPermissionRepresentation:
      properties:
        Clients:
          items:
            type: string
          type: array
        Condition:
          type: string
        Groups:
          items:
            type: string
          type: array
        Roles:
          items:
            type: string
          type: array
        Type:
          type: string
        Users:
          items:
            type: string
          type: array
      type: object
    UserConsentRepresentation:
      properties:
        ClientId:
          type: string
        CreatedDate:
          format: int64
          type: integer
        GrantedClientScopes:
          items:
            type: string
          type: array
        GrantedRealmRoles:
          items:
            type: string
          type: array
        LastUpdatedDate:
          format: int64
          type: integer
      type: object
    UserFederationMapperRepresentation:
      properties:
        Config:
          additionalProperties:
            type: string
          type: object
        FederationMapperType:
          type: string
        FederationProviderDisplayName:
          type: string
        Id:
          type: string
        Name:
          type: string
      type: object
    UserFederationMapperSyncConfigRepresentation:
      properties:
        FedToKeycloakSyncMessage:
          type: string
        FedToKeycloakSyncSupported:
          type: boolean
        KeycloakToFedSyncMessage:
          type: string
        KeycloakToFedSyncSupported:
          type: boolean
      type: object
    UserFederationMapperTypeRepresentation:
      properties:
        Category:
          type: string
        DefaultConfig:
          additionalProperties:
            type: string
          type: object
        HelpText:
          type: string
        Id:
          type: string
        Name:
          type: string
        Properties:
          items:
            $ref: '#/components/schemas/ConfigPropertyRepresentation'
          type: array
        SyncConfig:
          $ref: '#/components/schemas/UserFederationMapperSyncConfigRepresentation'
      type: object
    UserFederationProviderFactoryRepresentation:
      properties:
        HelpText:
          type: string
        Id:
          type: string
        Options:
          items:
            type: string
          type: array
        Properties:
          items:
            $ref: '#/components/schemas/ConfigPropertyRepresentation'
          type: array
      type: object
    UserFederationProviderRepresentation:
      properties:
        ChangedSyncPeriod:
          format: int32
          type: integer
        Config:
          additionalProperties:
            type: string
          type: object
        DisplayName:
          type: string
        FullSyncPeriod:
          format: int32
          type: integer
        Id:
          type: string
        LastSync:
          format: int32
          type: integer
        Priority:
          format: int32
          type: integer
        ProviderName:
          type: string
      type: object
    UserInfo:
      properties:
        Address:
          $ref: '#/components/schemas/AddressClaimSet'
        Birthdate:
          type: string
        ClaimsLocales:
          type: string
        Email:
          type: string
        EmailVerified:
          type: boolean
        FamilyName:
          type: string
        Gender:
          type: string
        GivenName:
          type: string
        Issuer:
          type: string
        Locale:
          type: string
        MiddleName:
          type: string
        Name:
          type: string
        NickName:
          type: string
        OtherClaims:
          additionalProperties:
            type: object
          type: object
        PhoneNumber:
          type: string
        PhoneNumberVerified:
          type: boolean
        Picture:
          type: string
        PreferredUsername:
          type: string
        Profile:
          type: string
        Sub:
          type: string
        Subject:
          type: string
        UpdatedAt:
          format: int64
          type: integer
        Website:
          type: string
        Zoneinfo:
          type: string
      type: object
    UserPolicyRepresentation:
      properties:
        Type:
          type: string
        Users:
          items:
            type: string
          type: array
      type: object
    UserRepresentation:
      properties:
        Access:
          additionalProperties:
            type: boolean
          type: object
        ApplicationRoles:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        Attributes:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        ClientConsents:
          items:
            $ref: '#/components/schemas/UserConsentRepresentation'
          type: array
        ClientRoles:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        CreatedTimestamp:
          format: int64
          type: integer
        Credentials:
          items:
            $ref: '#/components/schemas/CredentialRepresentation'
          type: array
        DisableableCredentialTypes:
          items:
            type: string
          type: array
        Email:
          type: string
        EmailVerified:
          type: boolean
        Enabled:
          type: boolean
        FederatedIdentities:
          items:
            $ref: '#/components/schemas/FederatedIdentityRepresentation'
          type: array
        FederationLink:
          type: string
        FirstName:
          type: string
        Groups:
          items:
            type: string
          type: array
        Id:
          type: string
        LastName:
          type: string
        NotBefore:
          format: int32
          type: integer
        Origin:
          type: string
        RealmRoles:
          items:
            type: string
          type: array
        RequiredActions:
          items:
            type: string
          type: array
        Self:
          type: string
        ServiceAccountClientId:
          type: string
        SocialLinks:
          items:
            $ref: '#/components/schemas/SocialLinkRepresentation'
          type: array
        Totp:
          type: boolean
        Username:
          type: string
      type: object
    UserSessionRepresentation:
      properties:
        Clients:
          additionalProperties:
            type: string
          type: object
        Id:
          type: string
        IpAddress:
          type: string
        LastAccess:
          format: int64
          type: integer
        Start:
          format: int64
          type: integer
        UserId:
          type: string
        Username:
          type: string
      type: object
    VersionRepresentation:
      properties:
        BuildTime:
          type: string
        Version:
          type: string
      type: object
  securitySchemes:
    access_token:
      bearerFormat: JWT
      scheme: bearer
      type: http
info:
  description: This is a REST API reference for the Keycloak Admin
  title: Keycloak REST Api
  version: '1'
openapi: 3.0.1
paths:
  /:
    get:
      description: '/

        Get accessible realms


        Returns a list of accessible realms. The list is filtered based on what realms
        the caller is allowed to view.


        '
      parameters:
      - in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RealmRepresentation'
                type: array
          description: Success
      tags:
      - RealmsAdmin
    post:
      description: '/

        Import a realm


        Imports a realm from a full representation of that realm.  Realm name must
        be unique.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealmRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - RealmsAdmin
  /{realm}:
    delete:
      description: '/

        Delete the realm


        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
    get:
      description: '/

        Get the top-level representation of the realm


        It will not include nested information like User and Client representations.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealmRepresentation'
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    put:
      description: '/

        Update the top-level information of the realm


        Any user, roles or client information in the representation

        will be ignored.  This will only update top-level attributes of the realm.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealmRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
  /{realm}/admin-events:
    delete:
      description: '/

        Delete all admin events


        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
    get:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      parameters:
      - in: query
        name: operationTypes
        schema:
          items:
            type: string
          type: array
      - in: query
        name: authRealm
        schema:
          type: string
      - in: query
        name: authClient
        schema:
          type: string
      - in: query
        name: authUser
        schema:
          type: string
      - in: query
        name: authIpAddress
        schema:
          type: string
      - in: query
        name: resourcePath
        schema:
          type: string
      - in: query
        name: dateFrom
        schema:
          type: string
      - in: query
        name: dateTo
        schema:
          type: string
      - in: query
        name: first
        schema:
          format: int32
          type: integer
      - in: query
        name: max
        schema:
          format: int32
          type: integer
      - in: query
        name: resourceTypes
        schema:
          items:
            type: string
          type: array
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AdminEventRepresentation'
                type: array
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/attack-detection/brute-force/users:
    delete:
      description: '/

        Clear any user login failures for all users


        This can release temporary disabled users


        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - AttackDetection
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/attack-detection/brute-force/users/{userId}:
    delete:
      description: '/

        Clear any user login failures for the user


        This can release temporary disabled user


        '
      responses:
        2XX:
          description: Success
      tags:
      - AttackDetection
    get:
      description: '/

        Get status of a username in brute force detection


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: Success
      tags:
      - AttackDetection
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: userId
      required: true
      schema:
        type: string
  /{realm}/authentication/authenticator-providers:
    get:
      description: '/

        Get authenticator providers


        Returns a stream of authenticator providers.

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    type: object
                  type: object
                type: array
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/authentication/client-authenticator-providers:
    get:
      description: '/

        Get client authenticator providers


        Returns a stream of client authenticator providers.

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    type: object
                  type: object
                type: array
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/authentication/config:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Create new authenticator configuration

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/config-description/{providerId}:
    get:
      description: '/

        Get authenticator provider''s configuration description

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatorConfigInfoRepresentation'
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: providerId
      required: true
      schema:
        type: string
  /{realm}/authentication/config/{id}:
    delete:
      description: '/

        Delete authenticator configuration

        '
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
    get:
      description: '/

        Get authenticator configuration

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: Configuration id
      in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Update authenticator configuration

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/executions:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Add new authentication execution


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationExecutionRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/executions/{executionId}:
    delete:
      description: '/

        Delete execution


        '
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
    get:
      description: '/

        Get Single Execution

        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: executionId
      required: true
      schema:
        type: string
  /{realm}/authentication/executions/{executionId}/config:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: Execution id
      in: path
      name: executionId
      required: true
      schema:
        type: string
    post:
      description: '/

        Update execution with new configuration


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/executions/{executionId}/config/{id}:
    get:
      description: '/

        Get execution''s configuration


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatorConfigRepresentation'
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: Execution id
      in: path
      name: executionId
      required: true
      schema:
        type: string
    - description: Configuration id
      in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/authentication/executions/{executionId}/lower-priority:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: Execution id
      in: path
      name: executionId
      required: true
      schema:
        type: string
    post:
      description: '/

        Lower execution''s priority


        '
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/executions/{executionId}/raise-priority:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: Execution id
      in: path
      name: executionId
      required: true
      schema:
        type: string
    post:
      description: '/

        Raise execution''s priority


        '
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/flows:
    get:
      description: '/

        Get authentication flows


        Returns a stream of authentication flows.

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuthenticationFlowRepresentation'
                type: array
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Create a new authentication flow


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationFlowRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/flows/{flowAlias}/copy:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: Name of the existing authentication flow
      in: path
      name: flowAlias
      required: true
      schema:
        type: string
    post:
      description: '/

        Copy existing authentication flow under a new name


        The new name is given as ''newName'' attribute of the passed JSON object


        '
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/flows/{flowAlias}/executions:
    get:
      description: '/

        Get authentication executions for a flow


        '
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: Flow alias
      in: path
      name: flowAlias
      required: true
      schema:
        type: string
    put:
      description: '/

        Update authentication executions of a Flow

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationExecutionInfoRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/flows/{flowAlias}/executions/execution:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: Alias of parent flow
      in: path
      name: flowAlias
      required: true
      schema:
        type: string
    post:
      description: '/

        Add new authentication execution to a flow


        '
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/flows/{flowAlias}/executions/flow:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: Alias of parent authentication flow
      in: path
      name: flowAlias
      required: true
      schema:
        type: string
    post:
      description: '/

        Add new flow with new execution to existing flow


        '
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/flows/{id}:
    delete:
      description: '/

        Delete an authentication flow


        '
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
    get:
      description: '/

        Get authentication flow for id


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationFlowRepresentation'
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: Flow id
      in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Update an authentication flow


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationFlowRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/form-action-providers:
    get:
      description: '/

        Get form action providers


        Returns a stream of form action providers.

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    type: object
                  type: object
                type: array
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/authentication/form-providers:
    get:
      description: '/

        Get form providers


        Returns a stream of form providers.

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    type: object
                  type: object
                type: array
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/authentication/per-client-config-description:
    get:
      description: '/

        Get configuration descriptions for all clients

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    $ref: '#/components/schemas/ConfigPropertyRepresentation'
                  type: array
                type: object
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/authentication/register-required-action:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Register a new required actions


        '
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/required-actions:
    get:
      description: '/

        Get required actions


        Returns a stream of required actions.

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RequiredActionProviderRepresentation'
                type: array
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/authentication/required-actions/{alias}:
    delete:
      description: '/

        Delete required action

        '
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
    get:
      description: '/

        Get required action for alias

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequiredActionProviderRepresentation'
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: Alias of required action
      in: path
      name: alias
      required: true
      schema:
        type: string
    put:
      description: '/

        Update required action


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequiredActionProviderRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/required-actions/{alias}/lower-priority:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: Alias of required action
      in: path
      name: alias
      required: true
      schema:
        type: string
    post:
      description: '/

        Lower required action''s priority


        '
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/required-actions/{alias}/raise-priority:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: Alias of required action
      in: path
      name: alias
      required: true
      schema:
        type: string
    post:
      description: '/

        Raise required action''s priority


        '
      responses:
        2XX:
          description: Success
      tags:
      - AuthenticationManagement
  /{realm}/authentication/unregistered-required-actions:
    get:
      description: '/

        Get unregistered required actions


        Returns a stream of unregistered required actions.

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    type: string
                  type: object
                type: array
          description: Success
      tags:
      - AuthenticationManagement
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/clear-keys-cache:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Clear cache of external public keys (Public keys of clients or Identity providers)


        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
  /{realm}/clear-realm-cache:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Clear realm cache


        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
  /{realm}/clear-user-cache:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Clear user cache


        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
  /{realm}/client-description-converter:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Base path for importing clients under this realm.


        '
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/xml:
            schema:
              type: string
          text/plain:
            schema:
              type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRepresentation'
          description: Success
      tags:
      - RealmAdmin
  /{realm}/client-policies/policies:
    get:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientPoliciesRepresentation'
          description: Success
      tags:
      - ClientPolicies
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    put:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientPoliciesRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - ClientPolicies
  /{realm}/client-policies/profiles:
    get:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      parameters:
      - in: query
        name: include-global-profiles
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfilesRepresentation'
          description: Success
      tags:
      - ClientProfiles
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    put:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientProfilesRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - ClientProfiles
  /{realm}/client-registration-policy/providers:
    get:
      description: '/

        Base path for retrieve providers with the configProperties properly filled


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ComponentTypeRepresentation'
                type: array
          description: Success
      tags:
      - ClientRegistrationPolicy
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/client-scopes:
    get:
      description: '/

        Get client scopes belonging to the realm


        Returns a list of client scopes belonging to the realm

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientScopeRepresentation'
                type: array
          description: Success
      tags:
      - ClientScopes
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Create a new client scope


        Client Scope''s name must be unique!


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientScopeRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - ClientScopes
  /{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}:
    delete:
      description: '/

        Delete the mapper


        '
      responses:
        2XX:
          description: Success
      tags:
      - ProtocolMappers
    get:
      description: '/

        Get mapper by id


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtocolMapperRepresentation'
          description: Success
      tags:
      - ProtocolMappers
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id1
      required: true
      schema:
        type: string
    - description: Mapper id
      in: path
      name: id2
      required: true
      schema:
        type: string
    put:
      description: '/

        Update the mapper


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - ProtocolMappers
  /{realm}/client-scopes/{id}:
    delete:
      description: '/

        Delete the client scope

        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - ClientScope
    get:
      description: '/

        Get representation of the client scope


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientScopeRepresentation'
          description: Success
      tags:
      - ClientScope
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Update the client scope

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientScopeRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - ClientScope
  /{realm}/client-scopes/{id}/protocol-mappers/add-models:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Create multiple mappers


        /

        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ProtocolMapperRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ProtocolMappers
  /{realm}/client-scopes/{id}/protocol-mappers/models:
    get:
      description: '/

        Get mappers


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProtocolMapperRepresentation'
                type: array
          description: Success
      tags:
      - ProtocolMappers
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Create a mapper


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - ProtocolMappers
  /{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}:
    get:
      description: '/

        Get mappers by name for a specific protocol


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProtocolMapperRepresentation'
                type: array
          description: Success
      tags:
      - ProtocolMappers
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: protocol
      required: true
      schema:
        type: string
  /{realm}/client-scopes/{id}/scope-mappings:
    get:
      description: '/

        Get all scope mappings for the client


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
          description: Success
      tags:
      - ScopeMapped
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/client-scopes/{id}/scope-mappings/clients/{client}:
    delete:
      description: '/

        Remove client-level roles from the client''s scope.


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ScopeMappedClient
    get:
      description: '/

        Get the roles associated with a client''s scope


        Returns roles for the client.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMappedClient
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
    post:
      description: '/

        Add client-level roles to the client''s scope


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ScopeMappedClient
  /{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available:
    get:
      description: '/

        The available client-level roles


        Returns the roles for the client that can be associated with the client''s
        scope


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMappedClient
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
  /{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite:
    get:
      description: '/

        Get effective client roles


        Returns the roles for the client that are associated with the client''s scope.


        '
      parameters:
      - description: if false, return roles with their attributes
        in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMappedClient
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
  /{realm}/client-scopes/{id}/scope-mappings/realm:
    delete:
      description: '/

        Remove a set of realm-level roles from the client''s scope


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ScopeMapped
    get:
      description: '/

        Get realm-level roles associated with the client''s scope


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMapped
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Add a set of realm-level roles to the client''s scope


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ScopeMapped
  /{realm}/client-scopes/{id}/scope-mappings/realm/available:
    get:
      description: '/

        Get realm-level roles that are available to attach to this client''s scope


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMapped
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/client-scopes/{id}/scope-mappings/realm/composite:
    get:
      description: '/

        Get effective realm-level roles associated with the client''s scope


        What this does is recurse

        any composite roles associated with the client''s scope and adds the roles
        to this lists.  The method is really

        to show a comprehensive total view of realm-level roles associated with the
        client.


        '
      parameters:
      - description: if false, return roles with their attributes
        in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMapped
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/client-session-stats:
    get:
      description: '/

        Get client session stats


        Returns a JSON map.  The key is the client id, the value is the number of
        sessions that currently are active

        with that client.  Only clients that actually have a session associated with
        them will be in this map.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    type: string
                  type: object
                type: array
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/client-templates:
    get:
      description: '/

        Get client scopes belonging to the realm


        Returns a list of client scopes belonging to the realm

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientScopeRepresentation'
                type: array
          description: Success
      tags:
      - ClientScopes
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Create a new client scope


        Client Scope''s name must be unique!


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientScopeRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - ClientScopes
  /{realm}/client-templates/{id1}/protocol-mappers/models/{id2}:
    delete:
      description: '/

        Delete the mapper


        '
      responses:
        2XX:
          description: Success
      tags:
      - ProtocolMappers
    get:
      description: '/

        Get mapper by id


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtocolMapperRepresentation'
          description: Success
      tags:
      - ProtocolMappers
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id1
      required: true
      schema:
        type: string
    - description: Mapper id
      in: path
      name: id2
      required: true
      schema:
        type: string
    put:
      description: '/

        Update the mapper


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - ProtocolMappers
  /{realm}/client-templates/{id}:
    delete:
      description: '/

        Delete the client scope

        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - ClientScope
    get:
      description: '/

        Get representation of the client scope


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientScopeRepresentation'
          description: Success
      tags:
      - ClientScope
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Update the client scope

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientScopeRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - ClientScope
  /{realm}/client-templates/{id}/protocol-mappers/add-models:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Create multiple mappers


        /

        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ProtocolMapperRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ProtocolMappers
  /{realm}/client-templates/{id}/protocol-mappers/models:
    get:
      description: '/

        Get mappers


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProtocolMapperRepresentation'
                type: array
          description: Success
      tags:
      - ProtocolMappers
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Create a mapper


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - ProtocolMappers
  /{realm}/client-templates/{id}/protocol-mappers/protocol/{protocol}:
    get:
      description: '/

        Get mappers by name for a specific protocol


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProtocolMapperRepresentation'
                type: array
          description: Success
      tags:
      - ProtocolMappers
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: protocol
      required: true
      schema:
        type: string
  /{realm}/client-templates/{id}/scope-mappings:
    get:
      description: '/

        Get all scope mappings for the client


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
          description: Success
      tags:
      - ScopeMapped
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/client-templates/{id}/scope-mappings/clients/{client}:
    delete:
      description: '/

        Remove client-level roles from the client''s scope.


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ScopeMappedClient
    get:
      description: '/

        Get the roles associated with a client''s scope


        Returns roles for the client.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMappedClient
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
    post:
      description: '/

        Add client-level roles to the client''s scope


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ScopeMappedClient
  /{realm}/client-templates/{id}/scope-mappings/clients/{client}/available:
    get:
      description: '/

        The available client-level roles


        Returns the roles for the client that can be associated with the client''s
        scope


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMappedClient
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
  /{realm}/client-templates/{id}/scope-mappings/clients/{client}/composite:
    get:
      description: '/

        Get effective client roles


        Returns the roles for the client that are associated with the client''s scope.


        '
      parameters:
      - description: if false, return roles with their attributes
        in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMappedClient
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
  /{realm}/client-templates/{id}/scope-mappings/realm:
    delete:
      description: '/

        Remove a set of realm-level roles from the client''s scope


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ScopeMapped
    get:
      description: '/

        Get realm-level roles associated with the client''s scope


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMapped
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Add a set of realm-level roles to the client''s scope


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ScopeMapped
  /{realm}/client-templates/{id}/scope-mappings/realm/available:
    get:
      description: '/

        Get realm-level roles that are available to attach to this client''s scope


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMapped
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/client-templates/{id}/scope-mappings/realm/composite:
    get:
      description: '/

        Get effective realm-level roles associated with the client''s scope


        What this does is recurse

        any composite roles associated with the client''s scope and adds the roles
        to this lists.  The method is really

        to show a comprehensive total view of realm-level roles associated with the
        client.


        '
      parameters:
      - description: if false, return roles with their attributes
        in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMapped
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of client scope (not name)
      in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients:
    get:
      description: '/

        Base path for managing clients under this realm.


        '
      parameters:
      - in: query
        name: clientId
        schema:
          type: string
      - in: query
        name: viewableOnly
        schema:
          type: boolean
      - in: query
        name: search
        schema:
          type: boolean
      - in: query
        name: q
        schema:
          type: string
      - in: query
        name: first
        schema:
          format: int32
          type: integer
      - in: query
        name: max
        schema:
          format: int32
          type: integer
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientRepresentation'
                type: array
          description: Success
      tags:
      - Clients
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Create a new client


        Client''s client_id must be unique!


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - Clients
  /{realm}/clients-initial-access:
    get:
      description: '/

        Base path for managing client initial access tokens


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientInitialAccessPresentation'
                type: array
          description: Success
      tags:
      - ClientInitialAccess
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Create a new initial access token.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientInitialAccessCreatePresentation'
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientInitialAccessPresentation'
          description: Success
      tags:
      - ClientInitialAccess
  /{realm}/clients-initial-access/{id}:
    delete:
      description: '/

        Base path for managing client initial access tokens


        '
      responses:
        2XX:
          description: Success
      tags:
      - ClientInitialAccess
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id1}/protocol-mappers/models/{id2}:
    delete:
      description: '/

        Delete the mapper


        '
      responses:
        2XX:
          description: Success
      tags:
      - ProtocolMappers
    get:
      description: '/

        Get mapper by id


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtocolMapperRepresentation'
          description: Success
      tags:
      - ProtocolMappers
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id1
      required: true
      schema:
        type: string
    - description: Mapper id
      in: path
      name: id2
      required: true
      schema:
        type: string
    put:
      description: '/

        Update the mapper


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - ProtocolMappers
  /{realm}/clients/{id}:
    delete:
      description: '/

        Delete the client


        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - Client
    get:
      description: '/

        Get representation of the client


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRepresentation'
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Update the client

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - Client
  /{realm}/clients/{id}/certificates/{attr}:
    get:
      description: '/

        Get key info


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRepresentation'
          description: Success
      tags:
      - ClientAttributeCertificate
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: attr
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/certificates/{attr}/download:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: attr
      required: true
      schema:
        type: string
    post:
      description: '/

        Get a keystore file for the client, containing private key and public certificate


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyStoreConfig'
      responses:
        2XX:
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - ClientAttributeCertificate
  /{realm}/clients/{id}/certificates/{attr}/generate:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: attr
      required: true
      schema:
        type: string
    post:
      description: '/

        Generate a new certificate with new key pair


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRepresentation'
          description: Success
      tags:
      - ClientAttributeCertificate
  /{realm}/clients/{id}/certificates/{attr}/generate-and-download:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: attr
      required: true
      schema:
        type: string
    post:
      description: '/

        Generate a new keypair and certificate, and get the private key file


        Generates a keypair and certificate and serves the private key in a specified
        keystore format.

        Only generated public certificate is saved in Keycloak DB - the private key
        is not.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyStoreConfig'
      responses:
        2XX:
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Success
      tags:
      - ClientAttributeCertificate
  /{realm}/clients/{id}/certificates/{attr}/upload:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: attr
      required: true
      schema:
        type: string
    post:
      description: '/

        Upload certificate and eventually private key


        '
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRepresentation'
          description: Success
      tags:
      - ClientAttributeCertificate
  /{realm}/clients/{id}/certificates/{attr}/upload-certificate:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: attr
      required: true
      schema:
        type: string
    post:
      description: '/

        Upload only certificate, not private key


        '
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRepresentation'
          description: Success
      tags:
      - ClientAttributeCertificate
  /{realm}/clients/{id}/client-secret:
    get:
      description: '/

        Get the client secret


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialRepresentation'
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Generate a new secret for the client


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialRepresentation'
          description: Success
      tags:
      - Client
  /{realm}/clients/{id}/client-secret/rotated:
    delete:
      description: '/

        Invalidate the rotated secret for the client


        '
      responses:
        2XX:
          description: Success
      tags:
      - Client
    get:
      description: '/

        Get the rotated client secret


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialRepresentation'
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/default-client-scopes:
    get:
      description: '/

        Get default client scopes.  Only name and ids are returned.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientScopeRepresentation'
                type: array
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/default-client-scopes/{clientScopeId}:
    delete:
      description: '/

        Base path for managing clients under this realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: clientScopeId
      required: true
      schema:
        type: string
    put:
      description: '/

        Base path for managing clients under this realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - Client
  /{realm}/clients/{id}/evaluate-scopes/generate-example-access-token:
    get:
      description: '/

        Create JSON with payload of example access token


        '
      parameters:
      - in: query
        name: scope
        schema:
          type: string
      - in: query
        name: userId
        schema:
          type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
          description: Success
      tags:
      - ClientScopeEvaluate
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/evaluate-scopes/generate-example-id-token:
    get:
      description: '/

        Create JSON with payload of example id token


        '
      parameters:
      - in: query
        name: scope
        schema:
          type: string
      - in: query
        name: userId
        schema:
          type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDToken'
          description: Success
      tags:
      - ClientScopeEvaluate
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/evaluate-scopes/generate-example-userinfo:
    get:
      description: '/

        Create JSON with payload of example user info


        '
      parameters:
      - in: query
        name: scope
        schema:
          type: string
      - in: query
        name: userId
        schema:
          type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: Success
      tags:
      - ClientScopeEvaluate
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/evaluate-scopes/protocol-mappers:
    get:
      description: '/

        Return list of all protocol mappers, which will be used when generating tokens
        issued for particular client. This means

        protocol mappers assigned to this client directly and protocol mappers assigned
        to all client scopes of this client.


        '
      parameters:
      - in: query
        name: scope
        schema:
          type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProtocolMapperEvaluationRepresentation'
                type: array
          description: Success
      tags:
      - ClientScopeEvaluate
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted:
    get:
      description: '/

        Get effective scope mapping of all roles of particular role container, which
        this client is defacto allowed to have in the accessToken issued for him.


        This contains scope mappings, which this client has directly, as well as scope
        mappings, which are granted to all client scopes,

        which are linked with this client.


        '
      parameters:
      - in: query
        name: scope
        schema:
          type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ClientScopeEvaluateScopeMappings
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: roleContainerId
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted:
    get:
      description: '/

        Get roles, which this client doesn''t have scope for and can''t have them
        in the accessToken issued for him. Defacto all the

        other roles of particular role container, which are not in {'
      parameters:
      - in: query
        name: scope
        schema:
          type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ClientScopeEvaluateScopeMappings
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: roleContainerId
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/installation/providers/{providerId}:
    get:
      description: '/

        Base path for managing clients under this realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: providerId
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/management/permissions:
    get:
      description: '/

        Return object stating whether client Authorization permissions have been initialized
        or not and a reference


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Return object stating whether client Authorization permissions have been initialized
        or not and a reference



        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: Success
      tags:
      - Client
  /{realm}/clients/{id}/nodes:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Register a cluster node with the client


        Manually register cluster node to this client - usually it''s not needed to
        call this directly as adapter should handle

        by sending registration request to Keycloak


        '
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
      responses:
        2XX:
          description: Success
      tags:
      - Client
  /{realm}/clients/{id}/nodes/{node}:
    delete:
      description: '/

        Unregister a cluster node from the client


        '
      responses:
        2XX:
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: node
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/offline-session-count:
    get:
      description: '/

        Get application offline session count


        Returns a number of offline user sessions associated with this client


        {

        "count": number

        }


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int64
                  type: integer
                type: object
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/offline-sessions:
    get:
      description: '/

        Get offline sessions for client


        Returns a list of offline user sessions associated with this client


        '
      parameters:
      - description: Paging offset
        in: query
        name: first
        schema:
          format: int32
          type: integer
      - description: Maximum results size (defaults to 100)
        in: query
        name: max
        schema:
          format: int32
          type: integer
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserSessionRepresentation'
                type: array
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/optional-client-scopes:
    get:
      description: '/

        Get optional client scopes.  Only name and ids are returned.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientScopeRepresentation'
                type: array
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/optional-client-scopes/{clientScopeId}:
    delete:
      description: '/

        Base path for managing clients under this realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: clientScopeId
      required: true
      schema:
        type: string
    put:
      description: '/

        Base path for managing clients under this realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - Client
  /{realm}/clients/{id}/protocol-mappers/add-models:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Create multiple mappers


        /

        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ProtocolMapperRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ProtocolMappers
  /{realm}/clients/{id}/protocol-mappers/models:
    get:
      description: '/

        Get mappers


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProtocolMapperRepresentation'
                type: array
          description: Success
      tags:
      - ProtocolMappers
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Create a mapper


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolMapperRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - ProtocolMappers
  /{realm}/clients/{id}/protocol-mappers/protocol/{protocol}:
    get:
      description: '/

        Get mappers by name for a specific protocol


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProtocolMapperRepresentation'
                type: array
          description: Success
      tags:
      - ProtocolMappers
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: protocol
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/push-revocation:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Push the client''s revocation policy to its admin URL


        If the client has an admin URL, push revocation policy to it.

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                description: GlobalRequestResult
                type: object
          description: Success
      tags:
      - Client
  /{realm}/clients/{id}/registration-access-token:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Generate a new registration access token for the client


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRepresentation'
          description: Success
      tags:
      - Client
  /{realm}/clients/{id}/roles:
    get:
      description: '/

        Get all roles for the realm or client


        '
      parameters:
      - in: query
        name: search
        schema:
          type: string
      - in: query
        name: first
        schema:
          format: int32
          type: integer
      - in: query
        name: max
        schema:
          format: int32
          type: integer
      - in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Create a new role for the realm or client


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - RoleContainer
  /{realm}/clients/{id}/roles/{role-name}:
    delete:
      description: '/

        Delete a role by name


        '
      responses:
        2XX:
          description: Success
      tags:
      - RoleContainer
    get:
      description: '/

        Get a role by name


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRepresentation'
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - description: role's name (not id!)
      in: path
      name: role-name
      required: true
      schema:
        type: string
    put:
      description: '/

        Update a role by name


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - RoleContainer
  /{realm}/clients/{id}/roles/{role-name}/composites:
    delete:
      description: '/

        Remove roles from the role''s composite


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - RoleContainer
    get:
      description: '/

        Get composites of the role


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - description: role's name (not id!)
      in: path
      name: role-name
      required: true
      schema:
        type: string
    post:
      description: '/

        Add a composite to the role


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - RoleContainer
  /{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}:
    get:
      description: '/

        Get client-level roles for the client that are in the role''s composite


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - description: role's name (not id!)
      in: path
      name: role-name
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: clientUuid
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/roles/{role-name}/composites/realm:
    get:
      description: '/

        Get realm-level roles of the role''s composite


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - description: role's name (not id!)
      in: path
      name: role-name
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/roles/{role-name}/groups:
    get:
      description: '/

        Base path for managing clients under this realm.


        '
      parameters:
      - in: query
        name: first
        schema:
          format: int32
          type: integer
      - in: query
        name: max
        schema:
          format: int32
          type: integer
      - in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRepresentation'
                type: array
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: role-name
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/roles/{role-name}/management/permissions:
    get:
      description: '/

        Return object stating whether role Authorization permissions have been initialized
        or not and a reference



        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: role-name
      required: true
      schema:
        type: string
    put:
      description: '/

        Return object stating whether role Authorization permissions have been initialized
        or not and a reference



        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: Success
      tags:
      - RoleContainer
  /{realm}/clients/{id}/roles/{role-name}/users:
    get:
      description: '/

        Returns a stream of users that have the specified role name.



        '
      parameters:
      - description: first result to return. Ignored if negative or {@code null}.
        in: query
        name: first
        schema:
          format: int32
          type: integer
      - description: maximum number of results to return. Ignored if negative or {@code
          null}.
        in: query
        name: max
        schema:
          format: int32
          type: integer
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserRepresentation'
                type: array
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - description: the role name.
      in: path
      name: role-name
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/scope-mappings:
    get:
      description: '/

        Get all scope mappings for the client


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
          description: Success
      tags:
      - ScopeMapped
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/scope-mappings/clients/{client}:
    delete:
      description: '/

        Remove client-level roles from the client''s scope.


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ScopeMappedClient
    get:
      description: '/

        Get the roles associated with a client''s scope


        Returns roles for the client.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMappedClient
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
    post:
      description: '/

        Add client-level roles to the client''s scope


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ScopeMappedClient
  /{realm}/clients/{id}/scope-mappings/clients/{client}/available:
    get:
      description: '/

        The available client-level roles


        Returns the roles for the client that can be associated with the client''s
        scope


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMappedClient
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/scope-mappings/clients/{client}/composite:
    get:
      description: '/

        Get effective client roles


        Returns the roles for the client that are associated with the client''s scope.


        '
      parameters:
      - description: if false, return roles with their attributes
        in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMappedClient
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/scope-mappings/realm:
    delete:
      description: '/

        Remove a set of realm-level roles from the client''s scope


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ScopeMapped
    get:
      description: '/

        Get realm-level roles associated with the client''s scope


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMapped
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Add a set of realm-level roles to the client''s scope


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ScopeMapped
  /{realm}/clients/{id}/scope-mappings/realm/available:
    get:
      description: '/

        Get realm-level roles that are available to attach to this client''s scope


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMapped
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/scope-mappings/realm/composite:
    get:
      description: '/

        Get effective realm-level roles associated with the client''s scope


        What this does is recurse

        any composite roles associated with the client''s scope and adds the roles
        to this lists.  The method is really

        to show a comprehensive total view of realm-level roles associated with the
        client.


        '
      parameters:
      - description: if false, return roles with their attributes
        in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ScopeMapped
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/service-account-user:
    get:
      description: '/

        Get a user dedicated to the service account


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRepresentation'
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/session-count:
    get:
      description: '/

        Get application session count


        Returns a number of user sessions associated with this client


        {

        "count": number

        }


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int64
                  type: integer
                type: object
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/test-nodes-available:
    get:
      description: '/

        Test if registered cluster nodes are available


        Tests availability by sending ''ping'' request to all cluster nodes.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                description: GlobalRequestResult
                type: object
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/clients/{id}/user-sessions:
    get:
      description: '/

        Get user sessions for client


        Returns a list of user sessions associated with this client


        '
      parameters:
      - description: Paging offset
        in: query
        name: first
        schema:
          format: int32
          type: integer
      - description: Maximum results size (defaults to 100)
        in: query
        name: max
        schema:
          format: int32
          type: integer
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserSessionRepresentation'
                type: array
          description: Success
      tags:
      - Client
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/components:
    get:
      description: '/

        Base path for managing components under this realm.


        '
      parameters:
      - in: query
        name: parent
        schema:
          type: string
      - in: query
        name: type
        schema:
          type: string
      - in: query
        name: name
        schema:
          type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ComponentRepresentation'
                type: array
          description: Success
      tags:
      - Component
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Base path for managing components under this realm.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - Component
  /{realm}/components/{id}:
    delete:
      description: '/

        Base path for managing components under this realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - Component
    get:
      description: '/

        Base path for managing components under this realm.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentRepresentation'
          description: Success
      tags:
      - Component
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Base path for managing components under this realm.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - Component
  /{realm}/components/{id}/sub-component-types:
    get:
      description: '/

        List of subcomponent types that are available to configure for a particular
        parent component.


        '
      parameters:
      - description: ''
        in: query
        name: type
        schema:
          type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ComponentTypeRepresentation'
                type: array
          description: Success
      tags:
      - Component
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/credential-registrators:
    get:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/default-default-client-scopes:
    get:
      description: '/

        Get realm default client scopes.  Only name and ids are returned.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientScopeRepresentation'
                type: array
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/default-default-client-scopes/{clientScopeId}:
    delete:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: clientScopeId
      required: true
      schema:
        type: string
    put:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
  /{realm}/default-groups:
    get:
      description: '/

        Get group hierarchy.  Only name and ids are returned.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRepresentation'
                type: array
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/default-groups/{groupId}:
    delete:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: groupId
      required: true
      schema:
        type: string
    put:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
  /{realm}/default-optional-client-scopes:
    get:
      description: '/

        Get realm optional client scopes.  Only name and ids are returned.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClientScopeRepresentation'
                type: array
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/default-optional-client-scopes/{clientScopeId}:
    delete:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: clientScopeId
      required: true
      schema:
        type: string
    put:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
  /{realm}/events:
    delete:
      description: '/

        Delete all events


        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
    get:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      parameters:
      - in: query
        name: type
        schema:
          items:
            type: string
          type: array
      - in: query
        name: client
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: string
      - in: query
        name: dateFrom
        schema:
          type: string
      - in: query
        name: dateTo
        schema:
          type: string
      - in: query
        name: ipAddress
        schema:
          type: string
      - in: query
        name: first
        schema:
          format: int32
          type: integer
      - in: query
        name: max
        schema:
          format: int32
          type: integer
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EventRepresentation'
                type: array
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/events/config:
    get:
      description: '/

        Get the events provider configuration


        Returns JSON object with events provider configuration


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealmEventsConfigRepresentation'
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    put:
      description: '/

        Update the events provider


        Change the events provider and/or its configuration


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealmEventsConfigRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
  /{realm}/group-by-path/{path}:
    get:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRepresentation'
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: path
      required: true
      schema:
        type: string
  /{realm}/groups:
    get:
      description: '/

        Get group hierarchy.  Only name and ids are returned.


        '
      parameters:
      - in: query
        name: search
        schema:
          type: string
      - in: query
        name: first
        schema:
          format: int32
          type: integer
      - in: query
        name: max
        schema:
          format: int32
          type: integer
      - in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRepresentation'
                type: array
          description: Success
      tags:
      - Groups
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        create or add a top level realm groupSet or create child.  This will update
        the group and set the parent if it exists.  Create it and set the parent

        if the group doesn''t exist.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - Groups
  /{realm}/groups/count:
    get:
      description: '/

        Returns the groups counts.


        '
      parameters:
      - in: query
        name: search
        schema:
          type: string
      - in: query
        name: top
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int64
                  type: integer
                type: object
          description: Success
      tags:
      - Groups
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/groups/{id}:
    delete:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - Group
    get:
      description: '/



        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRepresentation'
          description: Success
      tags:
      - Group
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Update group, ignores subgroups.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - Group
  /{realm}/groups/{id}/children:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Set or create child.  This will just set the parent if it exists.  Create
        it and set the parent

        if the group doesn''t exist.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - Group
  /{realm}/groups/{id}/management/permissions:
    get:
      description: '/

        Return object stating whether client Authorization permissions have been initialized
        or not and a reference


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: Success
      tags:
      - Group
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Return object stating whether client Authorization permissions have been initialized
        or not and a reference



        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: Success
      tags:
      - Group
  /{realm}/groups/{id}/members:
    get:
      description: '/

        Get users


        Returns a stream of users, filtered according to query parameters


        '
      parameters:
      - description: Pagination offset
        in: query
        name: first
        schema:
          format: int32
          type: integer
      - description: Maximum results size (defaults to 100)
        in: query
        name: max
        schema:
          format: int32
          type: integer
      - description: Only return basic information (only guaranteed to return id,
          username, created, first and last name,
        in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserRepresentation'
                type: array
          description: Success
      tags:
      - Group
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/groups/{id}/role-mappings:
    get:
      description: '/

        Get role mappings


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
          description: Success
      tags:
      - RoleMapper
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/groups/{id}/role-mappings/clients/{client}:
    delete:
      description: '/

        Delete client-level roles from user role mapping


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ClientRoleMappings
    get:
      description: '/

        Get client-level role mappings for the user, and the app


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ClientRoleMappings
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
    post:
      description: '/

        Add client-level roles to the user role mapping


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ClientRoleMappings
  /{realm}/groups/{id}/role-mappings/clients/{client}/available:
    get:
      description: '/

        Get available client-level roles that can be mapped to the user


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ClientRoleMappings
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
  /{realm}/groups/{id}/role-mappings/clients/{client}/composite:
    get:
      description: '/

        Get effective client-level role mappings


        This recurses any composite roles


        '
      parameters:
      - description: if false, return roles with their attributes
        in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ClientRoleMappings
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
  /{realm}/groups/{id}/role-mappings/realm:
    delete:
      description: '/

        Delete realm-level role mappings


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - RoleMapper
    get:
      description: '/

        Get realm-level role mappings


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleMapper
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Add realm-level role mappings to the user


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - RoleMapper
  /{realm}/groups/{id}/role-mappings/realm/available:
    get:
      description: '/

        Get realm-level roles that can be mapped


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleMapper
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/groups/{id}/role-mappings/realm/composite:
    get:
      description: '/

        Get effective realm-level role mappings


        This will recurse all composite roles to get the result.


        '
      parameters:
      - description: if false, return roles with their attributes
        in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleMapper
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/identity-provider/import-config:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Import identity provider from uploaded JSON file


        '
      requestBody:
        content:
          application/json:
            schema:
              type: object
          multipart/form-data:
            schema:
              type: object
      responses:
        2XX:
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: Success
      tags:
      - IdentityProviders
  /{realm}/identity-provider/instances:
    get:
      description: '/

        Get identity providers


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/IdentityProviderRepresentation'
                type: array
          description: Success
      tags:
      - IdentityProviders
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Create a new identity provider


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProviderRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - IdentityProviders
  /{realm}/identity-provider/instances/{alias}:
    delete:
      description: '/

        Delete the identity provider


        '
      responses:
        2XX:
          description: Success
      tags:
      - IdentityProvider
    get:
      description: '/

        Get the identity provider


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProviderRepresentation'
          description: Success
      tags:
      - IdentityProvider
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: alias
      required: true
      schema:
        type: string
    put:
      description: '/

        Update the identity provider


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProviderRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - IdentityProvider
  /{realm}/identity-provider/instances/{alias}/export:
    get:
      description: '/

        Export public broker configuration for identity provider


        '
      parameters:
      - description: Format to use
        in: query
        name: format
        schema:
          type: string
      responses:
        2XX:
          description: Success
      tags:
      - IdentityProvider
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: alias
      required: true
      schema:
        type: string
  /{realm}/identity-provider/instances/{alias}/management/permissions:
    get:
      description: '/

        Return object stating whether client Authorization permissions have been initialized
        or not and a reference


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: Success
      tags:
      - IdentityProvider
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: alias
      required: true
      schema:
        type: string
    put:
      description: '/

        Return object stating whether client Authorization permissions have been initialized
        or not and a reference



        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: Success
      tags:
      - IdentityProvider
  /{realm}/identity-provider/instances/{alias}/mapper-types:
    get:
      description: '/

        Get mapper types for identity provider

        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - IdentityProvider
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: alias
      required: true
      schema:
        type: string
  /{realm}/identity-provider/instances/{alias}/mappers:
    get:
      description: '/

        Get mappers for identity provider

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/IdentityProviderMapperRepresentation'
                type: array
          description: Success
      tags:
      - IdentityProvider
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: alias
      required: true
      schema:
        type: string
    post:
      description: '/

        Add a mapper to identity provider


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProviderMapperRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - IdentityProvider
  /{realm}/identity-provider/instances/{alias}/mappers/{id}:
    delete:
      description: '/

        Delete a mapper for the identity provider


        '
      responses:
        2XX:
          description: Success
      tags:
      - IdentityProvider
    get:
      description: '/

        Get mapper by id for the identity provider


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProviderMapperRepresentation'
          description: Success
      tags:
      - IdentityProvider
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: alias
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Update a mapper for the identity provider


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProviderMapperRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - IdentityProvider
  /{realm}/identity-provider/providers/{provider_id}:
    get:
      description: '/

        Get identity providers


        '
      responses:
        2XX:
          description: Success
      tags:
      - IdentityProviders
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: Provider id
      in: path
      name: provider_id
      required: true
      schema:
        type: string
  /{realm}/keys:
    get:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeysMetadataRepresentation'
          description: Success
      tags:
      - Key
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/ldap-server-capabilities:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Get LDAP supported extensions.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestLdapConnectionRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
  /{realm}/localization:
    get:
      description: '/

        Base path for managing localization under this realm.

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Success
      tags:
      - RealmLocalization
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/localization/{locale}:
    delete:
      description: '/

        Base path for managing localization under this realm.

        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmLocalization
    get:
      description: '/

        Base path for managing localization under this realm.

        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: Success
      tags:
      - RealmLocalization
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: locale
      required: true
      schema:
        type: string
    post:
      description: '/

        Import localization from uploaded JSON file

        /

        '
      requestBody:
        content:
          application/json:
            schema:
              type: object
          multipart/form-data:
            schema:
              type: object
      responses:
        2XX:
          description: Success
      tags:
      - RealmLocalization
  /{realm}/localization/{locale}/{key}:
    delete:
      description: '/

        Base path for managing localization under this realm.

        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmLocalization
    get:
      description: '/

        Base path for managing localization under this realm.

        /

        '
      responses:
        2XX:
          content:
            text/plain:
              schema:
                type: string
          description: Success
      tags:
      - RealmLocalization
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: locale
      required: true
      schema:
        type: string
    - in: path
      name: key
      required: true
      schema:
        type: string
    put:
      description: '/

        Base path for managing localization under this realm.

        /

        '
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        2XX:
          description: Success
      tags:
      - RealmLocalization
  /{realm}/logout-all:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Removes all user sessions.  Any client that has an admin url will also be
        told to invalidate any sessions

        they have.


        /

        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                description: GlobalRequestResult
                type: object
          description: Success
      tags:
      - RealmAdmin
  /{realm}/partial-export:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Partial export of existing realm into a JSON file.


        '
      parameters:
      - description: ''
        in: query
        name: exportGroupsAndRoles
        schema:
          type: boolean
      - description: ''
        in: query
        name: exportClients
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealmRepresentation'
          description: Success
      tags:
      - RealmAdmin
  /{realm}/partialImport:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Partial import from a JSON file to an existing realm.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialImportRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
  /{realm}/push-revocation:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Push the realm''s revocation policy to any client that has an admin url associated
        with it.


        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
  /{realm}/roles:
    get:
      description: '/

        Get all roles for the realm or client


        '
      parameters:
      - in: query
        name: search
        schema:
          type: string
      - in: query
        name: first
        schema:
          format: int32
          type: integer
      - in: query
        name: max
        schema:
          format: int32
          type: integer
      - in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Create a new role for the realm or client


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - RoleContainer
  /{realm}/roles-by-id/{role-id}:
    delete:
      description: '/

        Delete the role


        '
      responses:
        2XX:
          description: Success
      tags:
      - RoleById
    get:
      description: '/

        Get a specific role''s representation


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRepresentation'
          description: Success
      tags:
      - RoleById
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: id of role
      in: path
      name: role-id
      required: true
      schema:
        type: string
    put:
      description: '/

        Update the role


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - RoleById
  /{realm}/roles-by-id/{role-id}/composites:
    delete:
      description: '/

        Remove a set of roles from the role''s composite


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - RoleById
    get:
      description: '/

        Path for managing all realm-level or client-level roles defined in this realm
        by its id.


        '
      parameters:
      - in: query
        name: search
        schema:
          type: string
      - in: query
        name: first
        schema:
          format: int32
          type: integer
      - in: query
        name: max
        schema:
          format: int32
          type: integer
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleById
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: role-id
      required: true
      schema:
        type: string
    post:
      description: '/

        Make the role a composite role by associating some child roles


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - RoleById
  /{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}:
    get:
      description: '/

        Get client-level roles for the client that are in the role''s composite


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleById
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: role-id
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: clientUuid
      required: true
      schema:
        type: string
  /{realm}/roles-by-id/{role-id}/composites/realm:
    get:
      description: '/

        Get realm-level roles that are in the role''s composite


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleById
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: role-id
      required: true
      schema:
        type: string
  /{realm}/roles-by-id/{role-id}/management/permissions:
    get:
      description: '/

        Return object stating whether role Authoirzation permissions have been initialized
        or not and a reference



        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: Success
      tags:
      - RoleById
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: role-id
      required: true
      schema:
        type: string
    put:
      description: '/

        Return object stating whether role Authoirzation permissions have been initialized
        or not and a reference



        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: Success
      tags:
      - RoleById
  /{realm}/roles/{role-name}:
    delete:
      description: '/

        Delete a role by name


        '
      responses:
        2XX:
          description: Success
      tags:
      - RoleContainer
    get:
      description: '/

        Get a role by name


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleRepresentation'
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: role's name (not id!)
      in: path
      name: role-name
      required: true
      schema:
        type: string
    put:
      description: '/

        Update a role by name


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - RoleContainer
  /{realm}/roles/{role-name}/composites:
    delete:
      description: '/

        Remove roles from the role''s composite


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - RoleContainer
    get:
      description: '/

        Get composites of the role


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: role's name (not id!)
      in: path
      name: role-name
      required: true
      schema:
        type: string
    post:
      description: '/

        Add a composite to the role


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - RoleContainer
  /{realm}/roles/{role-name}/composites/clients/{clientUuid}:
    get:
      description: '/

        Get client-level roles for the client that are in the role''s composite


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: role's name (not id!)
      in: path
      name: role-name
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: clientUuid
      required: true
      schema:
        type: string
  /{realm}/roles/{role-name}/composites/realm:
    get:
      description: '/

        Get realm-level roles of the role''s composite


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: role's name (not id!)
      in: path
      name: role-name
      required: true
      schema:
        type: string
  /{realm}/roles/{role-name}/groups:
    get:
      description: '/

        base path for managing realm-level roles of this realm


        '
      parameters:
      - in: query
        name: first
        schema:
          format: int32
          type: integer
      - in: query
        name: max
        schema:
          format: int32
          type: integer
      - in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRepresentation'
                type: array
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: role-name
      required: true
      schema:
        type: string
  /{realm}/roles/{role-name}/management/permissions:
    get:
      description: '/

        Return object stating whether role Authorization permissions have been initialized
        or not and a reference



        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: role-name
      required: true
      schema:
        type: string
    put:
      description: '/

        Return object stating whether role Authorization permissions have been initialized
        or not and a reference



        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: Success
      tags:
      - RoleContainer
  /{realm}/roles/{role-name}/users:
    get:
      description: '/

        Returns a stream of users that have the specified role name.



        '
      parameters:
      - description: first result to return. Ignored if negative or {@code null}.
        in: query
        name: first
        schema:
          format: int32
          type: integer
      - description: maximum number of results to return. Ignored if negative or {@code
          null}.
        in: query
        name: max
        schema:
          format: int32
          type: integer
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserRepresentation'
                type: array
          description: Success
      tags:
      - RoleContainer
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: the role name.
      in: path
      name: role-name
      required: true
      schema:
        type: string
  /{realm}/sessions/{session}:
    delete:
      description: '/

        Remove a specific user session. Any client that has an admin url will also
        be told to invalidate this

        particular session.


        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: session
      required: true
      schema:
        type: string
  /{realm}/testLDAPConnection:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
  /{realm}/testSMTPConnection:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Test SMTP connection with current logged in user


        '
      responses:
        2XX:
          description: Success
      tags:
      - RealmAdmin
  /{realm}/user-storage/{id}/name:
    get:
      description: '/

        Need this for admin console to display simple name of provider when displaying
        user detail


        KEYCLOAK-4328


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: Success
      tags:
      - UserStorageProvider
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/user-storage/{id}/remove-imported-users:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Remove imported users



        '
      responses:
        2XX:
          description: Success
      tags:
      - UserStorageProvider
  /{realm}/user-storage/{id}/sync:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Trigger sync of users


        Action can be "triggerFullSync" or "triggerChangedUsersSync"


        '
      parameters:
      - description: ''
        in: query
        name: action
        schema:
          type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SynchronizationResult'
          description: Success
      tags:
      - UserStorageProvider
  /{realm}/user-storage/{id}/unlink-users:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - description: ''
      in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Unlink imported users from a storage provider



        '
      responses:
        2XX:
          description: Success
      tags:
      - UserStorageProvider
  /{realm}/user-storage/{parentId}/mappers/{id}/sync:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: parentId
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Trigger sync of mapper data related to ldap mapper (roles, groups, ...)


        direction is "fedToKeycloak" or "keycloakToFed"


        '
      parameters:
      - in: query
        name: direction
        schema:
          type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SynchronizationResult'
          description: Success
      tags:
      - UserStorageProvider
  /{realm}/users:
    get:
      description: '/

        Base path for managing users in this realm.


        '
      parameters:
      - in: query
        name: search
        schema:
          type: string
      - in: query
        name: lastName
        schema:
          type: string
      - in: query
        name: firstName
        schema:
          type: string
      - in: query
        name: email
        schema:
          type: string
      - in: query
        name: username
        schema:
          type: string
      - in: query
        name: emailVerified
        schema:
          type: boolean
      - in: query
        name: idpAlias
        schema:
          type: string
      - in: query
        name: idpUserId
        schema:
          type: string
      - in: query
        name: first
        schema:
          format: int32
          type: integer
      - in: query
        name: max
        schema:
          format: int32
          type: integer
      - in: query
        name: enabled
        schema:
          type: boolean
      - in: query
        name: briefRepresentation
        schema:
          type: boolean
      - in: query
        name: exact
        schema:
          type: boolean
      - in: query
        name: q
        schema:
          type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserRepresentation'
                type: array
          description: Success
      tags:
      - Users
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    post:
      description: '/

        Create a new user


        Username must be unique.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - Users
  /{realm}/users-management-permissions:
    get:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: Success
      tags:
      - RealmAdmin
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    put:
      description: '/

        Base path for the admin REST API for one particular realm.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementPermissionReference'
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementPermissionReference'
          description: Success
      tags:
      - RealmAdmin
  /{realm}/users/count:
    get:
      description: '/

        Base path for managing users in this realm.


        '
      parameters:
      - in: query
        name: search
        schema:
          type: string
      - in: query
        name: lastName
        schema:
          type: string
      - in: query
        name: firstName
        schema:
          type: string
      - in: query
        name: email
        schema:
          type: string
      - in: query
        name: emailVerified
        schema:
          type: boolean
      - in: query
        name: username
        schema:
          type: string
      - in: query
        name: enabled
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: Success
      tags:
      - Users
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
  /{realm}/users/profile:
    get:
      description: '/

        Base path for managing users in this realm.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                type: string
          description: Success
      tags:
      - UserProfile
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    put:
      description: '/

        Base path for managing users in this realm.


        '
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        2XX:
          description: Success
      tags:
      - UserProfile
  /{realm}/users/{id}:
    delete:
      description: '/

        Delete the user

        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - User
    get:
      description: '/

        Get representation of the user


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRepresentation'
          description: Success
      tags:
      - User
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Update the user


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - User
  /{realm}/users/{id}/configured-user-storage-credential-types:
    get:
      description: '/

        Return credential types, which are provided by the user storage where user
        is stored. Returned values can contain for example "password", "otp" etc.

        This will always return empty list for "local" users, which are not backed
        by any user storage


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Success
      tags:
      - User
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/users/{id}/consents:
    get:
      description: '/

        Get consents granted by the user


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    type: object
                  type: object
                type: array
          description: Success
      tags:
      - User
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/users/{id}/consents/{client}:
    delete:
      description: '/

        Revoke consent and offline tokens for particular client from user


        '
      responses:
        2XX:
          description: Success
      tags:
      - User
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - description: Client id
      in: path
      name: client
      required: true
      schema:
        type: string
  /{realm}/users/{id}/credentials:
    get:
      description: '/

        Base path for managing users in this realm.


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CredentialRepresentation'
                type: array
          description: Success
      tags:
      - User
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/users/{id}/credentials/{credentialId}:
    delete:
      description: '/

        Remove a credential for a user


        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - User
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: credentialId
      required: true
      schema:
        type: string
  /{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - description: The credential to move
      in: path
      name: credentialId
      required: true
      schema:
        type: string
    - description: The credential that will be the previous element in the list. If
        set to null, the moved credential will be the first element in the list.
      in: path
      name: newPreviousCredentialId
      required: true
      schema:
        type: string
    post:
      description: '/

        Move a credential to a position behind another credential

        '
      responses:
        2XX:
          description: Success
      tags:
      - User
  /{realm}/users/{id}/credentials/{credentialId}/moveToFirst:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - description: The credential to move
      in: path
      name: credentialId
      required: true
      schema:
        type: string
    post:
      description: '/

        Move a credential to a first position in the credentials list of the user

        '
      responses:
        2XX:
          description: Success
      tags:
      - User
  /{realm}/users/{id}/credentials/{credentialId}/userLabel:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: credentialId
      required: true
      schema:
        type: string
    put:
      description: '/

        Update a credential label for a user

        /

        '
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        2XX:
          description: Success
      tags:
      - User
  /{realm}/users/{id}/disable-credential-types:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Disable all credentials for a user of a specific type


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - User
  /{realm}/users/{id}/execute-actions-email:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Send a update account email to the user


        An email contains a link the user can click to perform a set of required actions.

        The redirectUri and clientId parameters are optional. If no redirect is given,
        then there will

        be no link back to click after actions have completed.  Redirect uri must
        be a valid uri for the

        particular clientId.


        '
      parameters:
      - description: Redirect uri
        in: query
        name: OIDCLoginProtocol.REDIRECT_URI_PARAM
        schema:
          type: string
      - description: Client id
        in: query
        name: OIDCLoginProtocol.CLIENT_ID_PARAM
        schema:
          type: string
      - description: Number of seconds after which the generated token expires
        in: query
        name: lifespan
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - User
  /{realm}/users/{id}/federated-identity:
    get:
      description: '/

        Get social logins associated with the user


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FederatedIdentityRepresentation'
                type: array
          description: Success
      tags:
      - User
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/users/{id}/federated-identity/{provider}:
    delete:
      description: '/

        Remove a social login provider from user


        '
      responses:
        2XX:
          description: Success
      tags:
      - User
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - description: Social login provider id
      in: path
      name: provider
      required: true
      schema:
        type: string
    post:
      description: '/

        Add a social login provider to the user


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FederatedIdentityRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - User
  /{realm}/users/{id}/groups:
    get:
      description: '/

        Base path for managing users in this realm.


        '
      parameters:
      - in: query
        name: search
        schema:
          type: string
      - in: query
        name: first
        schema:
          format: int32
          type: integer
      - in: query
        name: max
        schema:
          format: int32
          type: integer
      - in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupRepresentation'
                type: array
          description: Success
      tags:
      - User
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/users/{id}/groups/count:
    get:
      description: '/

        Base path for managing users in this realm.


        '
      parameters:
      - in: query
        name: search
        schema:
          type: string
      responses:
        2XX:
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int64
                  type: integer
                type: object
          description: Success
      tags:
      - User
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/users/{id}/groups/{groupId}:
    delete:
      description: '/

        Base path for managing users in this realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - User
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: groupId
      required: true
      schema:
        type: string
    put:
      description: '/

        Base path for managing users in this realm.


        '
      responses:
        2XX:
          description: Success
      tags:
      - User
  /{realm}/users/{id}/impersonation:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Impersonate the user


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: Success
      tags:
      - User
  /{realm}/users/{id}/logout:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Remove all user sessions associated with the user


        Also send notification to all clients that have an admin URL to invalidate
        the sessions for the particular user.


        /

        '
      responses:
        2XX:
          description: Success
      tags:
      - User
  /{realm}/users/{id}/offline-sessions/{clientUuid}:
    get:
      description: '/

        Get offline sessions associated with the user and client


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserSessionRepresentation'
                type: array
          description: Success
      tags:
      - User
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: clientUuid
      required: true
      schema:
        type: string
  /{realm}/users/{id}/reset-password:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Set up a new password for the user.


        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialRepresentation'
      responses:
        2XX:
          description: Success
      tags:
      - User
  /{realm}/users/{id}/reset-password-email:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Send an email to the user with a link they can click to reset their password.

        The redirectUri and clientId parameters are optional. The default for the

        redirect is the account client.


        This endpoint has been deprecated.  Please use the execute-actions-email passing
        a list with

        UPDATE_PASSWORD within it.


        '
      parameters:
      - description: redirect uri
        in: query
        name: OIDCLoginProtocol.REDIRECT_URI_PARAM
        schema:
          type: string
      - description: client id
        in: query
        name: OIDCLoginProtocol.CLIENT_ID_PARAM
        schema:
          type: string
      responses:
        2XX:
          description: Success
      tags:
      - User
  /{realm}/users/{id}/role-mappings:
    get:
      description: '/

        Get role mappings


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingsRepresentation'
          description: Success
      tags:
      - RoleMapper
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/users/{id}/role-mappings/clients/{client}:
    delete:
      description: '/

        Delete client-level roles from user role mapping


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ClientRoleMappings
    get:
      description: '/

        Get client-level role mappings for the user, and the app


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ClientRoleMappings
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
    post:
      description: '/

        Add client-level roles to the user role mapping


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - ClientRoleMappings
  /{realm}/users/{id}/role-mappings/clients/{client}/available:
    get:
      description: '/

        Get available client-level roles that can be mapped to the user


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ClientRoleMappings
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
  /{realm}/users/{id}/role-mappings/clients/{client}/composite:
    get:
      description: '/

        Get effective client-level role mappings


        This recurses any composite roles


        '
      parameters:
      - description: if false, return roles with their attributes
        in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - ClientRoleMappings
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    - in: path
      name: client
      required: true
      schema:
        type: string
  /{realm}/users/{id}/role-mappings/realm:
    delete:
      description: '/

        Delete realm-level role mappings


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - RoleMapper
    get:
      description: '/

        Get realm-level role mappings


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleMapper
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      description: '/

        Add realm-level role mappings to the user


        '
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RoleRepresentation'
              type: array
      responses:
        2XX:
          description: Success
      tags:
      - RoleMapper
  /{realm}/users/{id}/role-mappings/realm/available:
    get:
      description: '/

        Get realm-level roles that can be mapped


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleMapper
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/users/{id}/role-mappings/realm/composite:
    get:
      description: '/

        Get effective realm-level role mappings


        This will recurse all composite roles to get the result.


        '
      parameters:
      - description: if false, return roles with their attributes
        in: query
        name: briefRepresentation
        schema:
          type: boolean
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
                type: array
          description: Success
      tags:
      - RoleMapper
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /{realm}/users/{id}/send-verify-email:
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: '/

        Send an email-verification email to the user


        An email contains a link the user can click to verify their email address.

        The redirectUri and clientId parameters are optional. The default for the

        redirect is the account client.


        '
      parameters:
      - description: Redirect uri
        in: query
        name: OIDCLoginProtocol.REDIRECT_URI_PARAM
        schema:
          type: string
      - description: Client id
        in: query
        name: OIDCLoginProtocol.CLIENT_ID_PARAM
        schema:
          type: string
      responses:
        2XX:
          description: Success
      tags:
      - User
  /{realm}/users/{id}/sessions:
    get:
      description: '/

        Get sessions associated with the user


        '
      responses:
        2XX:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserSessionRepresentation'
                type: array
          description: Success
      tags:
      - User
    parameters:
    - description: realm name (not id!)
      in: path
      name: realm
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
security:
- access_token: []
